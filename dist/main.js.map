{"version":3,"sources":["webpack://3d-renderer/./src/Etc/mathFunctions.ts","webpack://3d-renderer/./src/File/fileLoader.ts","webpack://3d-renderer/./src/Rendering/vector.ts","webpack://3d-renderer/./src/Rendering/matrix.ts","webpack://3d-renderer/./src/Rendering/quaternion.ts","webpack://3d-renderer/./src/transform.ts","webpack://3d-renderer/./src/Rendering/node.ts","webpack://3d-renderer/./src/Rendering/model.ts","webpack://3d-renderer/./src/Animation/JointTransform.ts","webpack://3d-renderer/./src/time.ts","webpack://3d-renderer/./src/Animation/animator.ts","webpack://3d-renderer/./src/Animation/animatedModel.ts","webpack://3d-renderer/./src/Rendering/renderer.ts","webpack://3d-renderer/./src/Animation/animatedRenderer.ts","webpack://3d-renderer/./src/Animation/keyframe.ts","webpack://3d-renderer/./src/Animation/animation.ts","webpack://3d-renderer/./src/Etc/webglUtils.ts","webpack://3d-renderer/./src/Animation/joint.ts","webpack://3d-renderer/./src/Rendering/camera.ts","webpack://3d-renderer/./src/main.ts","webpack://3d-renderer/./src/Rendering/scene.ts","webpack://3d-renderer/./src/Rendering/staticModel.ts","webpack://3d-renderer/./src/Rendering/staticRenderer.ts"],"names":["degToRad","d","Math","PI","lerp","a","b","step","ArrayType","ComponentType","x","y","z","magnitude","v","sqrt","normalize","len","Vector3","divide","add","subtract","multiply","scalar","console","error","dotProduct","vectorCrossProduct","interpolate","zero","forward","backward","up","down","left","right","this","Vector2","w","Vector4","r0c0","r0c1","r0c2","r0c3","r1c0","r1c1","r1c2","r1c3","r2c0","r2c1","r2c2","r2c3","r3c0","r3c1","r3c2","r3c3","elements","getElementAt","row","col","setElementAt","value","flatten","makeIdentity","Matrix4","makeScale","makeTranslation","makeXRotation","angleInRadians","sine","sin","cosine","cos","makeYRotation","makeZRotation","makePerspective","fovInRadians","aspectRatio","zNear","zFar","f","tan","rangeInv","makeLookAtMatrix","position","target","zAxis","xAxis","yAxis","makeViewMatrix","eye","forwardZ","rightX","upY","multiplyMatrix4ByVector4","m","multiplyMatrices4","multiplied","i","j","transpose","transposed","copy","copied","inverse","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","compose","translation","scale","quaternion","result","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","conjugate","rotate","c1","s1","c2","s2","c3","s3","c1c2","s1s2","q","Quaternion","toMatrix4","sqw","sqx","sqy","sqz","tmp1","tmp2","fromMatrix4","diagonal","w4","x4","y4","z4","cosHalfTheta","abs","halfTheta","acos","sinHalfTheta","ratioA","ratioB","rotation","reset","computeDirectionVectors","_up","_right","_forward","shouldComputeDirections","rotationMatrix","translate","angles","setRotation","updateLocalMatrix","localMatrix","translationMatrix","scaleMatrix","updateWorldMatrix","parentMatrix","worldMatrix","getWorldMatrix","getLocalMatrix","transform","Transform","children","setParent","parent","index","indexOf","splice","addChild","child","push","updateTransforms","forEach","renderer","bufferData","buffer","data","bufferType","ctx","getContext","bindBuffer","WebGLRenderingContext","STATIC_DRAW","render","camera","BaseNode","JointTransform","computeTime","now","deltaTime","time","model","doAnimation","animation","currentTime","update","increaseAnimationTime","currentPose","computeCurrentAnimationPose","applyPoseToJoints","rootJoint","lengthInSeconds","getPreviousAndNextFrames","previousFrame","nextFrame","calculateProgression","interpolatePoses","joint","currentTransform","name","currentMatrix","animatedMatrix","inverseBindMatrix","allKeyFrames","keyframes","previous","next","length","timestamp","totalTime","key","pose","positions","normals","textureCoords","indices","joints","weights","jointCount","createBuffer","indexCount","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","boneTexture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","animator","Animator","arr","Float32Array","flattenJointMatrices","offset","id","set","texImage2D","RGBA","FLOAT","Model","context","program","positionAttributeLocation","getAttribLocation","texCoordsAttributeLocation","normalsAttributeLocation","jointsAttributeLocation","weightsAttributeLocation","worldMatrixUniformLocation","getUniformLocation","viewMatrixUniformLocation","projectionMatrixUniformLocation","worldInverseTransposeMatrixLocation","reverseLightDirectionLocation","jointTextureLocation","jointCountLocation","loadTexture","img","texture","UNSIGNED_BYTE","generateMipmap","loadTexture2","color","Uint8Array","clear","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","projectionMatrix","getPerspectiveMatrix","viewMatrix","viewport","canvas","width","height","useProgram","enable","CULL_FACE","DEPTH_TEST","uniform1i","uniform1f","uniformMatrix4fv","worldInverse","reverseLightDirectionVector","uniform3fv","enableVertexAttribArray","vertexAttribPointer","activeTexture","TEXTURE0","TEXTURE1","drawElements","TRIANGLES","UNSIGNED_SHORT","BaseRenderer","fromGLTFAnimation","anim","samples","animationLength","animationName","jointsAnimations","jointName","map","s","t","p","jointAnimation","values","HumbleKeyframe","log","HumbleAnimation","loadFromScript","gl","shaderElem","shaderType","shader","createShader","shaderSource","text","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","vertexShader","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","deleteProgram","inverseMatrix","getComponentLengthByType","loadGltf","url","getDataFromAccessors","accessorIndex","file","buffers","accessor","accessors","bufferView","bufferViews","byteOffset","byteLength","type","BYTES_PER_ELEMENT","SHORT","Int16Array","UNSIGNED_INTEGER","Uint32Array","Uint16Array","getTypedArray","componentType","max","min","positionData","normalData","texCoordData","indicesData","jointData","weightData","animations","loadJson","gltf","baseURL","URL","location","href","Promise","all","uri","loadArrayBuffer","binaryBuffers","meshes","mesh","primitives","primitive","positionAccessorIndex","attributes","normalAccessorIndex","texCoordAccessorIndex","jointAccessorIndex","weightAccessorIndex","indicesIndex","skins","skin","actualJointNodes","nodes","inverseMatricesAccessor","inverseBindMatrices","inverseMatricesBufferView","inverseBindMatricesData","Array","quat","Joint","find","maxLength","animationData","jointAnimationsByName","channels","channel","sampler","samplers","inputData","input","outputData","output","node","jointAnimData","timestampIndex","componentLen","from","slice","path","toLowerCase","interpolationMethod","interpolation","Object","loadText","fetch","json","loadImage","resolve","reject","Image","addEventListener","src","arrayBuffer","staticRenderer","animatedRenderer","scene","fieldOfView","near","far","Camera","getActiveCamera","setActiveCamera","computePerspectiveMatrix","perspectiveMatrix","activeCamera","globalLightDirection","rootNodes","rootNode","firsPersonCamera","cameraObj","forwardVelocity","rightVelocity","maxXRotation","minXRotation","currentRotationAngles","cameraSpeed","mouseSensibility","Move","direction","cam","speed","velocity","Rotate","rotationAmount","controls","models","gameLoop","requestAnimationFrame","window","onload","FileLoader","then","gltfModel","canvasElem","document","querySelector","vertexShaderElemStatic","fragmentShaderElemStatic","vertexShaderElemAnimated","fragmentShaderElemAnimated","getExtension","webglUtils","VERTEX_SHADER","FRAGMENT_SHADER","StaticRenderer","AnimatedRenderer","aspect","clientWidth","clientHeight","yFov","setup","Scene","StaticModel","model2","AnimatedModel","animAttack","event","mouseMoved","movementY","movementX","requestPointerLock","pointerLockElement","removeEventListener","createEventHandlers"],"mappings":"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","file":"main.js","sourcesContent":["export function radToDeg(r: number): number {\r\n    return r * 180 / Math.PI;\r\n}\r\n\r\nexport function degToRad(d: number): number {\r\n    return d * Math.PI / 180;\r\n}\r\n\r\nexport function randomIntFromInterval(min: number, max: number) { // min and max included \r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function slerp() {\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param a 'from' parameter\r\n * @param b 'to' parameter\r\n * @param step  step between 0 ~ 1. 0 returns a, 1 returns b, 0.5 returns the midpoint between a and b\r\n */\r\nexport function lerp(a: number, b: number, step: number) {\r\n    let iStep = 1 - step;\r\n    return  (iStep * a) + (step * b);\r\n}","import { Joint } from \"../Animation/joint\";\r\nimport { Matrix4 } from \"../Rendering/matrix\";\r\nimport { Quaternion } from \"../Rendering/quaternion\";\r\nimport { Vector3, Vector4 } from \"../Rendering/vector\";\r\nimport { Transform } from \"../transform\";\r\n\r\nexport class FileLoader {\r\n\r\n    static getComponentLengthByType() {\r\n\r\n    }\r\n\r\n\r\n    static async loadGltf(url: string) {\r\n        //TODO: load animation data\r\n        let result: GLTFModel = {\r\n            positionData: null,\r\n            normalData: null,\r\n            texCoordData: null,\r\n            indicesData: null,\r\n            jointData: null,\r\n            weightData: null,\r\n            rootJoint: null,\r\n            jointCount: 0,\r\n            animations: []\r\n        };\r\n\r\n        let inverseBindMatricesData: Float32Array;\r\n\r\n        let gltf = await this.loadJson<GLTFFile>(url);\r\n        const baseURL = new URL(url, location.href);\r\n\r\n        let binaryBuffers = await Promise.all(gltf.buffers.map((buffer) => {\r\n            const url = new URL(buffer.uri, baseURL.href);\r\n            return this.loadArrayBuffer(url.href);\r\n        }));\r\n\r\n        //there is just one mesh so far...\r\n        gltf.meshes.forEach((mesh) => {\r\n            mesh.primitives.forEach((primitive) => {\r\n                const positionAccessorIndex = primitive.attributes[\"POSITION\"];\r\n                const normalAccessorIndex = primitive.attributes[\"NORMAL\"];\r\n                const texCoordAccessorIndex = primitive.attributes[\"TEXCOORD_0\"];\r\n                const jointAccessorIndex = primitive.attributes[\"JOINTS_0\"];\r\n                const weightAccessorIndex = primitive.attributes[\"WEIGHTS_0\"];\r\n                const indicesIndex = primitive.indices;\r\n\r\n                result.positionData = getDataFromAccessors(positionAccessorIndex, gltf, binaryBuffers).data as Float32Array;\r\n                result.normalData = getDataFromAccessors(normalAccessorIndex, gltf, binaryBuffers).data as Float32Array;\r\n                result.texCoordData = getDataFromAccessors(texCoordAccessorIndex, gltf, binaryBuffers).data as Float32Array;\r\n                result.jointData = getDataFromAccessors(jointAccessorIndex, gltf, binaryBuffers).data as Uint8Array;\r\n                result.weightData = getDataFromAccessors(weightAccessorIndex, gltf, binaryBuffers).data as Float32Array;\r\n                result.indicesData = getDataFromAccessors(indicesIndex, gltf, binaryBuffers).data as Uint16Array;\r\n\r\n                // console.log(\"position\", result.positionData);\r\n                // console.log(\"normals\", result.normalData);\r\n                // console.log(\"tex coords\", result.texCoordData);\r\n                // console.log(\"joint ids\", result.jointData);\r\n                // console.log(\"weights\", result.weightData);\r\n                // console.log(\"indices\", result.indicesData);\r\n                //console.log(gltf);\r\n            });\r\n        });\r\n\r\n        //now the skins...\r\n        //there is only one skin so far...\r\n        let joints: Joint[];\r\n        gltf.skins.forEach((skin) => {\r\n            let actualJointNodes = skin.joints.map(index => gltf.nodes[index]);\r\n            const inverseMatricesAccessor = gltf.accessors[skin.inverseBindMatrices];\r\n            const inverseMatricesBufferView = gltf.bufferViews[inverseMatricesAccessor.bufferView];\r\n            const buffer = binaryBuffers[inverseMatricesBufferView.buffer];\r\n            inverseBindMatricesData = new Float32Array(buffer, inverseMatricesBufferView.byteOffset, inverseMatricesBufferView.byteLength / Float32Array.BYTES_PER_ELEMENT);\r\n            let inverseBindMatrices = new Array<Matrix4>(inverseBindMatricesData.length / 16);\r\n\r\n            for (let i = 0; i < inverseBindMatrices.length; i++) {\r\n                let offset = (16 * i);\r\n                inverseBindMatrices[i] = new Matrix4(\r\n                    inverseBindMatricesData[0 + offset], inverseBindMatricesData[1 + offset], inverseBindMatricesData[2 + offset], inverseBindMatricesData[3 + offset],\r\n                    inverseBindMatricesData[4 + offset], inverseBindMatricesData[5 + offset], inverseBindMatricesData[6 + offset], inverseBindMatricesData[7 + offset],\r\n                    inverseBindMatricesData[8 + offset], inverseBindMatricesData[9 + offset], inverseBindMatricesData[10 + offset], inverseBindMatricesData[11 + offset],\r\n                    inverseBindMatricesData[12 + offset], inverseBindMatricesData[13 + offset], inverseBindMatricesData[14 + offset], inverseBindMatricesData[15 + offset]\r\n                );\r\n            }\r\n\r\n            //console.log(\"FileLoader: \", inverseBindMatricesData);\r\n\r\n            //console.log(\"inverse bind matrices: \", inverseBindMatrices);\r\n\r\n            joints = new Array<Joint>(actualJointNodes.length);\r\n\r\n            //fill a Joint array\r\n\r\n            for (let i = 0; i < actualJointNodes.length; i++) {\r\n                // let localMatrix = Matrix4.makeIdentity();\r\n                // let translation = actualJointNodes[i].translation;\r\n                // let rotation = actualJointNodes[i].rotation;\r\n                // let scale = actualJointNodes[i].scale;\r\n\r\n                // if (translation) {\r\n                //     let translationMatrix = Matrix4.makeTranslation(translation[0], translation[1], translation[2]);\r\n                //     localMatrix = Matrix4.multiplyMatrices4(translationMatrix, localMatrix);\r\n                // }\r\n\r\n                // if (rotation) {\r\n                //     let quaternion = new Quaternion(rotation[0], rotation[1], rotation[2], rotation[3]);\r\n                //     let rotationMatrix = quaternion.toMatrix4();\r\n                //     localMatrix = Matrix4.multiplyMatrices4(rotationMatrix, localMatrix);\r\n                // }\r\n\r\n                // if (scale) {\r\n                //     let scaleMatrix = Matrix4.makeTranslation(scale[0], scale[1], scale[2]);\r\n                //     localMatrix = Matrix4.multiplyMatrices4(scaleMatrix, localMatrix);\r\n                // }\r\n\r\n                //let localBindMatrix = Matrix4.makeIdentity();\r\n                let position = new Vector3(0, 0, 0);\r\n                let rotation = new Vector4(0, 0, 0, 1);\r\n                let scale = new Vector3(1, 1, 1);\r\n\r\n                if (actualJointNodes[i].translation) {\r\n                    position.x = actualJointNodes[i].translation[0];\r\n                    position.y = actualJointNodes[i].translation[1];\r\n                    position.z = actualJointNodes[i].translation[2];\r\n                }\r\n\r\n                if (actualJointNodes[i].rotation) {\r\n                    rotation.x = actualJointNodes[i].rotation[0];\r\n                    rotation.y = actualJointNodes[i].rotation[1];\r\n                    rotation.z = actualJointNodes[i].rotation[2];\r\n                    rotation.w = actualJointNodes[i].rotation[3];\r\n                }\r\n\r\n                if (actualJointNodes[i].scale) {\r\n                    scale.x = actualJointNodes[i].scale[0];\r\n                    scale.y = actualJointNodes[i].scale[1];\r\n                    scale.z = actualJointNodes[i].scale[2];\r\n                }\r\n\r\n                let quat = new Quaternion(rotation.x, rotation.y, rotation.z, rotation.w);\r\n                let transform = new Transform(position, quat, scale);\r\n\r\n                //localBindMatrix = Matrix4.compose(position, scale, rotation);\r\n\r\n                joints[i] = new Joint(\r\n                    i,\r\n                    actualJointNodes[i].name,\r\n                    //localBindMatrix,\r\n                    transform,\r\n                    inverseBindMatrices[i]\r\n                );\r\n            }\r\n\r\n            //get tree-like hierarchy done\r\n            for (let i = 0; i < actualJointNodes.length; i++) {\r\n                if (actualJointNodes[i].children) {\r\n                    actualJointNodes[i].children.forEach(child => {\r\n                        let j = joints.find(x => x.name === gltf.nodes[child].name);\r\n                        j.setParent(joints[i]);\r\n                        //joints[i].children.push(j);\r\n                    });\r\n                }\r\n            }\r\n\r\n            //joints[0] // root->001->002->005->003->004\r\n            //joints[1] // 001\r\n            //joints[2] // 002\r\n            //joints[3] // 005\r\n            //joints[4] // 003\r\n            //joints[5] // 004\r\n\r\n\r\n\r\n            // joints[0].children = [joints[1], joints[4], joints[5]];\r\n            // joints[1].children = [joints[2]];\r\n            // joints[2].children = [joints[3]]\r\n\r\n            // joints[0].children = [joints[1], joints[4], joints[5]];\r\n            // joints[1].children = [joints[3]];\r\n            // joints[3].children = [joints[2]];\r\n\r\n            //root to bone 4\r\n            //bone 1 to bone 3\r\n\r\n            //joints[5].children = [joints[4], joints[1], joints[0]];\r\n            //joints[4].children = [joints[3]];\r\n            //joints[3].children = [joints[2]];\r\n\r\n            //is this right?\r\n            result.rootJoint = joints[0];\r\n            result.jointCount = joints.length;\r\n\r\n            //console.log(rootJoint);\r\n\r\n            // joints.forEach(j => {\r\n            //     console.log(Matrix4.multiplyMatrices4(j.inverseBindMatrix, j.localBindMatrix));\r\n            // });\r\n\r\n\r\n            //console.log(inverseBindMatricesData);\r\n        });\r\n\r\n        function getDataFromAccessors(accessorIndex: number, file: GLTFFile, buffers: ArrayBuffer[]) {\r\n\r\n            const accessor = file.accessors[accessorIndex];\r\n            const bufferView = file.bufferViews[accessor.bufferView];\r\n            const buffer = buffers[bufferView.buffer];\r\n            const data = getTypedArray(buffer, bufferView.byteOffset, bufferView.byteLength, accessor.componentType);\r\n\r\n            return {\r\n                max: accessor.max,\r\n                min: accessor.min,\r\n                type: accessor.type,\r\n                data: data\r\n            };\r\n\r\n        }\r\n        function getTypedArray(buffer: ArrayBuffer, byteOffset: number, byteLength: number, type: ArrayType) {\r\n            switch (type) {\r\n                case ArrayType.FLOAT:\r\n                    return new Float32Array(buffer, byteOffset, byteLength / Float32Array.BYTES_PER_ELEMENT);\r\n                case ArrayType.SHORT:\r\n                    return new Int16Array(buffer, byteOffset, byteLength / Int16Array.BYTES_PER_ELEMENT);\r\n                case ArrayType.UNSIGNED_BYTE:\r\n                    return new Uint8Array(buffer, byteOffset, byteLength / Uint8Array.BYTES_PER_ELEMENT);\r\n                case ArrayType.UNSIGNED_INTEGER:\r\n                    return new Uint32Array(buffer, byteOffset, byteLength / Uint32Array.BYTES_PER_ELEMENT);\r\n                case ArrayType.UNSIGNED_SHORT:\r\n                    return new Uint16Array(buffer, byteOffset, byteLength / Uint16Array.BYTES_PER_ELEMENT);\r\n                default:\r\n                    console.error(\"ComponentType not found: \", type);\r\n                    return null;\r\n            }\r\n        }\r\n\r\n\r\n        //now the animations:\r\n        //for each animation\r\n        //  - get name, if there is no name we call it something like anim1\r\n        //  - iterate through channels of the animation\r\n        //  - select the respective sampler\r\n        //  - load timestamps from input, values from output using 'getDataFromAccessors' and the interpolation method\r\n        //  - save which node/joint to animate and which 'path'(translation, rotation, scale)\r\n\r\n\r\n\r\n        gltf.animations.forEach((animation, i) => {\r\n            let maxLength = 0;\r\n            let animationData: SkeletonAnimationData = {} as SkeletonAnimationData;\r\n\r\n            animationData.animationName = animation.name ? animation.name : \"anim\" + i;\r\n\r\n\r\n            let jointAnimationsByName: { [key: string]: JointAnimationData } = {};\r\n\r\n            animation.channels.forEach((channel, j) => {\r\n                let sampler = animation.samplers[channel.sampler];\r\n                let inputData = getDataFromAccessors(sampler.input, gltf, binaryBuffers);\r\n                let outputData = getDataFromAccessors(sampler.output, gltf, binaryBuffers);\r\n                let node = gltf.nodes[channel.target.node];\r\n\r\n                let jointName = node.name ? node.name : \"joint\" + j;\r\n                //add to dictionary, if it is not already\r\n                if (!jointAnimationsByName[jointName]) {\r\n                    jointAnimationsByName[jointName] = { jointName: jointName } as JointAnimationData;\r\n                }\r\n\r\n                let jointAnimData = jointAnimationsByName[jointName];\r\n\r\n                let samples: AnimationSampleData[] = [];\r\n\r\n                inputData.data.forEach((timestamp, timestampIndex) => {\r\n                    timestamp *= 2; //debug\r\n                    let componentLen = ComponentType[outputData.type as keyof typeof ComponentType];\r\n                    let len = timestampIndex * componentLen;\r\n                    maxLength = Math.max(maxLength, timestamp);\r\n\r\n                    samples.push({ timestamp: timestamp, values: Array.from(outputData.data.slice(len, len + componentLen)) });\r\n                });\r\n\r\n                //TODO: replace this with something like:\r\n                //jointAnimData.[path] = {interpolationMethod: sampler.interpolation, samples};\r\n                switch (channel.target.path.toLowerCase()) {\r\n                    case \"translation\":\r\n                        jointAnimData.translation = { interpolationMethod: sampler.interpolation, samples };\r\n                        break;\r\n                    case \"rotation\":\r\n                        jointAnimData.rotation = { interpolationMethod: sampler.interpolation, samples };\r\n                        break;\r\n                    case \"scale\":\r\n                        jointAnimData.scale = { interpolationMethod: sampler.interpolation, samples };\r\n                        break;\r\n                    default:\r\n                        console.error(\"path not implemented: \", channel.target.path);\r\n                        break;\r\n                }\r\n\r\n            });\r\n            animationData.jointsAnimations = Object.values(jointAnimationsByName);\r\n            animationData.animationLength = maxLength;\r\n            result.animations.push(animationData);\r\n\r\n        });\r\n        console.log(result.animations);\r\n\r\n        return result;\r\n\r\n        //return [positionData, normalData, texCoordData, jointData, weightData, indicesData];\r\n\r\n        //return GltfParser.parse(binaryBuffers);\r\n    }\r\n\r\n    static async loadText(url: string) {\r\n        let response = await fetch(url);\r\n        return response.text();\r\n    }\r\n\r\n    static async loadJson<T>(url: string) {\r\n        let response = await fetch(url);\r\n        return response.json() as Promise<T>;\r\n    }\r\n\r\n    static async loadImage(url: string): Promise<HTMLImageElement> {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.addEventListener('load', () => {\r\n                resolve(img);\r\n            });\r\n            img.src = url;\r\n        });\r\n    }\r\n\r\n    static async loadArrayBuffer(url: string) {\r\n        const response = await fetch(url);\r\n        return response.arrayBuffer();\r\n    }\r\n\r\n}\r\n\r\n\r\n//gltf types on demand\r\ninterface GLTFBuffer {\r\n    byteLength: number;\r\n    uri: string\r\n}\r\n\r\ninterface GLTFBufferView {\r\n    buffer: number;\r\n    byteLength: number;\r\n    byteOffset: number;\r\n}\r\n\r\ninterface GLTFAccessor {\r\n    bufferView: number;\r\n    componentType: number;\r\n    count: number;\r\n    max: number[];\r\n    min: number[];\r\n    type: string;\r\n}\r\n\r\ninterface GLTFMesh {\r\n    name: string;\r\n    primitives: GLTFPrimitive[]\r\n}\r\n\r\ninterface GLTFPrimitive {\r\n    attributes: GLTFAttributes;\r\n    indices: 5;\r\n    material: number;\r\n}\r\n\r\ninterface GLTFAttributes {\r\n    [key: string]: number;\r\n}\r\n\r\ninterface GLTFNode {\r\n    name: string;\r\n    rotation: number[]; //4-component quaternion\r\n    translation: number[]; //3-component vector\r\n    scale: number[];//3-component vector\r\n    skin: number; //skin index\r\n    mesh: number; //mesh index\r\n    children: number[]; // index of children nodes\r\n}\r\n\r\ninterface GLTFSkin {\r\n    inverseBindMatrices: number; //this is the accessor index?\r\n    joints: number[]; //ids for node array\r\n    name: string;\r\n}\r\n\r\ninterface GLTFFile {\r\n    nodes: GLTFNode[];\r\n    skins: GLTFSkin[];\r\n    meshes: GLTFMesh[];\r\n    animations: GLTFAnimation[];\r\n    buffers: GLTFBuffer[];\r\n    accessors: GLTFAccessor[];\r\n    bufferViews: GLTFBufferView[];\r\n}\r\n\r\ninterface GLTFAnimation {\r\n    name: string;\r\n    channels: GLTFAnimationChannel[];\r\n    samplers: GLTFAnimationSampler[];\r\n\r\n}\r\n\r\ninterface GLTFAnimationChannel {\r\n    sampler: number;\r\n    target: GLTFAnimationTarget;\r\n}\r\n\r\ninterface GLTFAnimationTarget {\r\n    node: number;\r\n    path: string;\r\n}\r\n\r\ninterface GLTFAnimationSampler {\r\n    input: number;\r\n    interpolation: string;\r\n    output: number;\r\n}\r\n\r\n//Output struct\r\nexport interface GLTFModel {\r\n    positionData: Float32Array;\r\n    normalData: Float32Array;\r\n    texCoordData: Float32Array;\r\n    indicesData: Uint16Array;\r\n    jointData: Uint8Array;\r\n    weightData: Float32Array;\r\n    rootJoint: Joint;\r\n    jointCount: number;\r\n    animations: SkeletonAnimationData[];\r\n}\r\n\r\n//output struct\r\nexport interface SkeletonAnimationData {\r\n    animationLength: number;\r\n    animationName: string;\r\n    jointsAnimations: JointAnimationData[];\r\n}\r\n\r\n//output struct\r\nexport interface JointAnimationData {\r\n    jointName: string;\r\n    rotation: AnimationData;\r\n    scale: AnimationData;\r\n    translation: AnimationData;\r\n}\r\n\r\n//output struct\r\nexport interface AnimationData {\r\n    interpolationMethod: string;\r\n    samples: AnimationSampleData[];\r\n}\r\n//output struct\r\nexport interface AnimationSampleData {\r\n    timestamp: number; //in GLTF, time is in seconds\r\n    values: number[]; //flattened values, if scale or translation its 3 components, if rotation its 4(quaternion)\r\n}\r\n\r\nenum ArrayType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    UNSIGNED_INTEGER = 5125,\r\n    FLOAT = 5126\r\n}\r\n\r\nenum ComponentType {\r\n    SCALAR = 1,\r\n    VEC2 = 2,\r\n    VEC3 = 3,\r\n    VEC4 = 4,\r\n    MAT2 = 4,\r\n    MAT3 = 9,\r\n    MAT4 = 16,\r\n\r\n}","import { lerp } from \"../Etc/mathFunctions\";\r\n\r\n//TODO: add functions to do math in place?\r\nexport class Vector2 {\r\n    x: number;\r\n    y: number;\r\n    /**\r\n    * \r\n    * @param x If not supplied, defaults to 0\r\n    * @param y If not supplied, defaults to 0\r\n    */\r\n    constructor(x?: number, y?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n    }\r\n    /**\r\n     * \r\n     * The magnitude of a vector can be thought of the hypotenuse \r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     *        \r\n     *           \r\n     *                 /| \r\n     *                / | \r\n     *               /  | \r\n     *          |v| /   | y \r\n     *             /    | \r\n     *            /_____|\r\n     *                x \r\n     * \r\n     * @param v The Vector\r\n     * @returns The length(magnitude) of the vector\r\n     */\r\n    static magnitude(v: Vector2): number {\r\n        return Math.sqrt((v.x * v.x) + (v.y * v.y));\r\n    }\r\n    /**\r\n     * Compute the unit vector for a given vector.\r\n     * \r\n     * @param v The vector\r\n     * @returns A new unit vector\r\n     */\r\n    static normalize(v: Vector2): Vector2 {\r\n        let len = Vector2.magnitude(v);\r\n        if (len > 0) {\r\n            return Vector2.divide(v, len);\r\n        } else {\r\n            return new Vector2(0, 0);\r\n        }\r\n    }\r\n    /**\r\n     * Simple vector addition. \r\n     * Just add each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a + b\r\n     */\r\n    static add(a: Vector2, b: Vector2): Vector2 {\r\n        return new Vector2(\r\n            a.x + b.x,\r\n            a.y + b.y);\r\n    }\r\n    /**\r\n    * Simple vector subtraction. \r\n    * Just subtract each component of both vectors together.\r\n    * \r\n    * @param a First vector\r\n    * @param b Second Vector\r\n    * @returns Result vector from a - b\r\n    */\r\n    static subtract(a: Vector2, b: Vector2): Vector2 {\r\n        return new Vector2(\r\n            a.x - b.x,\r\n            a.y - b.y);\r\n    }\r\n    /**\r\n     * Multiply each vector component by a scalar factor.\r\n     * Can be thought of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static multiply(v: Vector2, scalar: number): Vector2 {\r\n        return new Vector2(\r\n            v.x * scalar,\r\n            v.y * scalar);\r\n    }\r\n    /**\r\n     * Divide each vector component by a scalar factor.\r\n     * Can be thought of \"inverse\" of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The \"inverse\" scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static divide(v: Vector2, scalar: number): Vector2 {\r\n        if (scalar !== 0) {\r\n            return new Vector2(\r\n                v.x / scalar,\r\n                v.y / scalar);\r\n        } else {\r\n            console.error(\"Can't divide by zero, Vector2 was not divided!\")\r\n            return v;\r\n        }\r\n    }\r\n    /**\r\n     * Can be thought of as \"how aligned are two vectors\".\r\n     * \r\n     * Or like a projection(or the sadow) of a vector into another\r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     * \r\n     *               \r\n     *               \r\n     *              Y|     B\r\n     *               |     /|\r\n     *               |    / | \r\n     *               |   /  |\r\n     *               |  /   |\r\n     *               | /    |\r\n     *               |/     |\r\n     *               |------>A.B---------->A\r\n     *               |----------------------->\t\r\n     *                                        X\r\n     * \r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns The result of the dot product\r\n     */\r\n    static dotProduct(a: Vector2, b: Vector2): number {\r\n        return (a.x * b.x) + (a.y * b.y);\r\n    }\r\n}\r\n\r\n//TODO: add functions to do math in place?\r\nexport class Vector3 extends Vector2 {\r\n    z: number;\r\n    /**\r\n     * \r\n     * @param x If not supplied, defaults to 0\r\n     * @param y If not supplied, defaults to 0\r\n     * @param z If not supplied, defaults to 0\r\n     */\r\n    constructor(x?: number, y?: number, z?: number) {\r\n        super(x ?? 0, y ?? 0);\r\n        this.z = z ?? 0;\r\n    }\r\n    static zero: Vector3 = new Vector3(0, 0, 0);\r\n    static forward: Vector3 = new Vector3(0, 0, -1);\r\n    static backward: Vector3 = new Vector3(0, 0, 1);\r\n    static up: Vector3 = new Vector3(0, 1, 0);\r\n    static down: Vector3 = new Vector3(0, -1, 0);\r\n    static left: Vector3 = new Vector3(-1, 0, 0);\r\n    static right: Vector3 = new Vector3(1, 0, 0);\r\n\r\n    /**\r\n     *\r\n     * Short explanation: same as vector2 magnitude, but with 3 components:\r\n     * \r\n     * |v|² = x²+ y² + z²\r\n     * \r\n     * Long explanation:\r\n     * \r\n     *                          TOP-VIEW                         SIDE-VIEW\r\n     *                              /|                               /|   \r\n     *                             / |                              / |   \r\n     *                            /  |                             /  |   \r\n     *       \"projection\" of z   /   | z                      |v| /   | y \r\n     *                          /    |                           /    | \r\n     *                         /_____|                          /_____|\r\n     *                            x                         \"projection\" of z\r\n     *\r\n     *\r\n     *    (\"projection\" of z)²  = x² + z²\r\n     *\r\n     *      |v|² = (\"projection\" of z)² + y²\r\n     *      |v|² = x²+ y² + z²\r\n     * \r\n     * \r\n     * \r\n     * \r\n     * \r\n     * @param v The Vector\r\n     * @returns The length(magnitude) of the vector\r\n     */\r\n    static magnitude(v: Vector3): number {\r\n        return Math.sqrt((v.x * v.x) + (v.y * v.y) + (v.z * v.z));\r\n    }\r\n    /**\r\n     * Compute the unit vector for a given vector.\r\n     * \r\n     * @param v The vector\r\n     * @returns A new unit vector\r\n     */\r\n    static normalize(v: Vector3): Vector3 {\r\n        let len = Vector3.magnitude(v);\r\n        if (len > 0) {\r\n            return Vector3.divide(v, len);\r\n        } else {\r\n            return new Vector3(0, 0, 0);\r\n        }\r\n    }\r\n    /**\r\n     * Simple vector addition. \r\n     * Just add each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a + b\r\n     */\r\n    static add(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            a.x + b.x,\r\n            a.y + b.y,\r\n            a.z + b.z);\r\n    }\r\n    /**\r\n     * Simple vector subtraction. \r\n     * Just subtract each component of both vectors together.\r\n     * \r\n     * @param a First vector\r\n     * @param b Second Vector\r\n     * @returns Result vector from a - b\r\n     */\r\n    static subtract(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            a.x - b.x,\r\n            a.y - b.y,\r\n            a.z - b.z);\r\n    }\r\n    /**\r\n     * Multiply each vector component by a scalar factor.\r\n     * Can be thought of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static multiply(v: Vector3, scalar: number): Vector3 {\r\n        return new Vector3(\r\n            v.x * scalar,\r\n            v.y * scalar,\r\n            v.z * scalar\r\n        );\r\n    }\r\n    /**\r\n     * Divide each vector component by a scalar factor.\r\n     * Can be thought of \"inverse\" of scaling a vector by a factor.\r\n     * \r\n     * @param v The vector\r\n     * @param scalar The \"inverse\" scaling factor\r\n     * @returns New scaled vector\r\n     */\r\n    static divide(v: Vector3, scalar: number): Vector3 {\r\n        if (scalar !== 0) {\r\n            return new Vector3(\r\n                v.x / scalar,\r\n                v.y / scalar,\r\n                v.z / scalar\r\n            );\r\n        } else {\r\n            console.error(\"Can't divide by zero, Vector3 was not divided!\");\r\n            return v;\r\n        }\r\n    }\r\n    /**\r\n     * Can be thought of as \"how aligned are two vectors\".\r\n     * \r\n     * Or like a projection(or the sadow) of a vector into another\r\n     * \r\n     * of the triangle formed by the x and y components.\r\n     * \r\n     *               \r\n     *               \r\n     *              Y|     B\r\n     *               |     /|\r\n     *               |    / | \r\n     *               |   /  |\r\n     *               |  /   |\r\n     *               | /    |\r\n     *               |/     |\r\n     *               |------>A.B---------->A\r\n     *               |----------------------->\t\r\n     *                                        X\r\n     * \r\n     * PS.: compare 2D and 3D vector magnitude comments to clarify how the third component(z) affects the calculation\r\n     * \r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns The result of the dot product\r\n     */\r\n    static dotProduct(a: Vector3, b: Vector3): number {\r\n        return (a.x * b.x) + (a.y * b.y) + (a.z * b.z);\r\n    }\r\n    /**\r\n     * Computes the cross product between two vectors.\r\n     * The result of a cross product is a third vector which is orthogonal(90º) to A and B\r\n     * It can be thought of computing the normal vector to a plane described by A and B\r\n     * \r\n     * @param a Some vector\r\n     * @param b Some other vector\r\n     * @returns A new orthogonal vector to A and B\r\n     */\r\n    static vectorCrossProduct(a: Vector3, b: Vector3): Vector3 {\r\n        return new Vector3(\r\n            (a.y * b.z) - (a.z * b.y),\r\n            (a.z * b.x) - (a.x * b.z),\r\n            (a.x * b.y) - (a.y * b.x)\r\n        );\r\n    }\r\n    static interpolate(a: Vector3, b: Vector3, step: number): Vector3 {\r\n        let x = lerp(a.x, b.x, step);\r\n        let y = lerp(a.y, b.y, step);\r\n        let z = lerp(a.z, b.z, step);\r\n\r\n        return new Vector3(x, y, z);\r\n    }\r\n}\r\n\r\nexport class Vector4 extends Vector3 {\r\n    w: number;\r\n    /**\r\n     * \r\n     * @param x If not supplied, defaults to 0\r\n     * @param y If not supplied, defaults to 0\r\n     * @param z If not supplied, defaults to 0\r\n     * @param w If not supplied, defaults to 1\r\n     */\r\n    constructor(x?: number, y?: number, z?: number, w?: number) {\r\n        super(x ?? 0, y ?? 0, z ?? 0);\r\n        this.w = w ?? 1;\r\n    }\r\n    static forward: Vector4 = new Vector4(0, 0, -1, 1);\r\n    static backward: Vector4 = new Vector4(0, 0, 1, 1);\r\n    static up: Vector4 = new Vector4(0, 1, 0, 1);\r\n    static down: Vector4 = new Vector4(0, -1, 0, 1);\r\n    static left: Vector4 = new Vector4(-1, 0, 0, 1);\r\n    static right: Vector4 = new Vector4(1, 0, 0, 1);\r\n}","import { Vector3, Vector4 } from \"./vector\"\r\n\r\n//remember webGL is right-handed\r\n/**\r\n * This is a 4 ROWS(horizontal) by 4 COLUMNS matrix\r\n * \r\n * | r0c0  r0c1  r0c2  r0c3 | // row 0\r\n * | r1c0  r1c1  r1c2  r1c3 | // row 1\r\n * | r2c0  r2c1  r2c2  r2c3 | // row 2\r\n * | r3c0  r3c1  r3c2  r3c3 | // row 3\r\n * \r\n * BUT, the way WEBGL expects matrix data is as a single array, and \"column major\".\r\n * \r\n * So our matrix will be something like:\r\n * | r0c0  r1c0  r2c0  r3c0 | // col 0\r\n * | r0c1  r1c1  r2c1  r3c1 | // col 1\r\n * | r0c2  r1c2  r2c2  r3c2 | // col 2\r\n * | r0c3  r1c3  r2c3  r3c3 | // col 3\r\n * \r\n * or, in a single array: \r\n * \r\n * [ r0c0,  r1c0,  r2c0,  r3c0, r0c1,  r1c1,  r2c1,  r3c1,  r0c2,  r1c2,  r2c2,  r3c2, r0c3  r1c3  r2c3  r3c3 ]\r\n */\r\nexport class Matrix4 {\r\n    elements: number[]\r\n\r\n    constructor(r0c0?: number, r0c1?: number, r0c2?: number, r0c3?: number,\r\n        r1c0?: number, r1c1?: number, r1c2?: number, r1c3?: number,\r\n        r2c0?: number, r2c1?: number, r2c2?: number, r2c3?: number,\r\n        r3c0?: number, r3c1?: number, r3c2?: number, r3c3?: number) {\r\n        this.elements = [\r\n            r0c0 ?? 0, r0c1 ?? 0, r0c2 ?? 0, r0c3 ?? 0, // thats actually a column, not a row, but i call it row!\r\n            r1c0 ?? 0, r1c1 ?? 0, r1c2 ?? 0, r1c3 ?? 0,\r\n            r2c0 ?? 0, r2c1 ?? 0, r2c2 ?? 0, r2c3 ?? 0,\r\n            r3c0 ?? 0, r3c1 ?? 0, r3c2 ?? 0, r3c3 ?? 0,\r\n        ];\r\n    }\r\n    /**\r\n     * Get elements from the matrix at a given position.\r\n     * @param row Rows are zero based!\r\n     * @param col Columns are zero based!\r\n     * @returns The value at that position\r\n     */\r\n    getElementAt(row: number, col: number): number {\r\n        return this.elements[(col * 4) + row];\r\n    }\r\n    /**\r\n     * Set the value at a given position in the matrix\r\n     * @param row Rows are zero based!\r\n     * @param col Columns are zero based!\r\n     * @param value The value to be set\r\n     */\r\n    setElementAt(row: number, col: number, value: number): void {\r\n        this.elements[(col * 4) + row] = value;\r\n    }\r\n    flatten(): number[] {\r\n        return this.elements;\r\n    }\r\n\r\n    /**\r\n     * Identity matrix is the equivalent of the number \"1\" in matrices.\r\n     * In the sense that if we multiply any matrix 'M'by an Identity matrix 'I', the result will be 'M'.\r\n     * \r\n     * M * I = M\r\n     * \r\n     * @returns The identity matrix\r\n     */\r\n    static makeIdentity(): Matrix4 {\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Make a scale matrix\r\n     * @param x scale in x\r\n     * @param y scale in y\r\n     * @param z scale in z\r\n     * @returns The scale matrix\r\n     */\r\n    static makeScale(x: number, y: number, z: number): Matrix4 {\r\n        return new Matrix4(\r\n            x, 0, 0, 0,\r\n            0, y, 0, 0,\r\n            0, 0, z, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a translation matrix\r\n     * @param x translation in x\r\n     * @param y translation in y\r\n     * @param z translation in z\r\n     * @returns The translation matrix\r\n     */\r\n    static makeTranslation(x: number, y: number, z: number): Matrix4 {\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            x, y, z, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in X axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeXRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            1, 0, 0, 0,\r\n            0, cosine, sine, 0,\r\n            0, -sine, cosine, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in Y axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeYRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            cosine, 0, -sine, 0,\r\n            0, 1, 0, 0,\r\n            sine, 0, cosine, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a rotation in Z axis matrix\r\n     * @param angleInRadians rotation angle in radians!\r\n     * @returns The rotation matrix\r\n     */\r\n    static makeZRotation(angleInRadians: number): Matrix4 {\r\n        let sine = Math.sin(angleInRadians);\r\n        let cosine = Math.cos(angleInRadians);\r\n\r\n        return new Matrix4(\r\n            cosine, sine, 0, 0,\r\n            -sine, cosine, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n    /**\r\n     * Make a perspective matrix\r\n     * @param fovInRadians Field of view angle, in radians!\r\n     * @param aspectRatio width/height ratio\r\n     * @param zNear The near z coordinate\r\n     * @param zFar The far z coordinate\r\n     * @returns \r\n     */\r\n    static makePerspective(fovInRadians: number, aspectRatio: number, zNear: number, zFar: number): Matrix4 {\r\n        // let f = Math.tan(fovInRadians / 2);\r\n\r\n        // return new Matrix4(\r\n        //     1 / (aspectRatio * f), 0, 0, 0,\r\n        //     0, 1 / f, 0, 0,\r\n        //     0, 0, zFar / (zFar - zNear), -(zFar * zNear) / (zFar - zNear),\r\n        //     0, 0, 0, 1);\r\n        let f = Math.tan(Math.PI * 0.5 - 0.5 * fovInRadians);\r\n        let rangeInv = 1.0 / (zNear - zFar);\r\n\r\n        return new Matrix4(\r\n            f / aspectRatio, 0, 0, 0,\r\n            0, f, 0, 0,\r\n            0, 0, (zNear + zFar) * rangeInv, -1,\r\n            0, 0, (zNear * zFar * rangeInv * 2), 0);\r\n\r\n    }\r\n\r\n    static makeLookAtMatrix(position: Vector3, target: Vector3, up: Vector3): Matrix4 {\r\n        let zAxis = Vector3.normalize(Vector3.subtract(position, target));\r\n        let xAxis = Vector3.normalize(Vector3.vectorCrossProduct(up, zAxis));\r\n        var yAxis = Vector3.normalize(Vector3.vectorCrossProduct(zAxis, xAxis));\r\n\r\n        return new Matrix4(\r\n            xAxis.x, xAxis.y, xAxis.z, 0,\r\n            yAxis.x, yAxis.y, yAxis.z, 0,\r\n            zAxis.x, zAxis.y, zAxis.z, 0,\r\n            position.x, position.y, position.z, 1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Make a view(camera) matrix\r\n     * @param eye The eye/camera position\r\n     * @param target The \"look at target\" (position + direction)\r\n     * @param up The UP vector\r\n     * @returns The view(camera) matrix\r\n     */\r\n    static makeViewMatrix(eye: Vector3, target: Vector3, up: Vector3): Matrix4 {\r\n        //TODO: maybe use look at matrix here\r\n        let forwardZ = Vector3.normalize(Vector3.subtract(eye, target));\r\n        let rightX = Vector3.normalize(Vector3.vectorCrossProduct(up, forwardZ));\r\n        let upY = Vector3.vectorCrossProduct(forwardZ, rightX);\r\n        //this matrix is result of multiplying a translate with rotation(inverse of) matrix:\r\n\r\n        // | 1  0  0  eyeX |     | x.x  y.x  z.x  0 |(Inverse)\r\n        // | 0  1  0  eyeY |  *  | x.y  y.y  z.y  0 |\r\n        // | 0  0  1  eyeZ |     | x.z  y.z  z.z  0 |\r\n        // | 0  0  0   1   |     |  0    0    0   1 |\r\n\r\n        //since it is an orthogonal matrix, to compute the inverse we just transpose:\r\n        // | 1  0  0  eyeX |     | x.x  x.y  x.z  0 |(Inverse)\r\n        // | 0  1  0  eyeY |  *  | y.x  y.y  y.z  0 |\r\n        // | 0  0  1  eyeZ |     | z.x  z.y  z.z  0 |\r\n        // | 0  0  0   1   |     |  0    0    0   1 |\r\n\r\n        // | x.x  x.y  x.z  -dot(x, eye) |\r\n        // | y.x  y.y  y.z  -dot(y, eye) |\r\n        // | z.x  y.z  z.z  -dot(z, eye) |\r\n        // |  0    0    0        1       |\r\n\r\n        // return new Matrix4(\r\n        //     rightX.x,     rightX.y,     rightX.z,   -Vector3.dotProduct(rightX, eye),\r\n        //     upY.x,           upY.y,        upY.z,      -Vector3.dotProduct(upY, eye),\r\n        //     forwardZ.x, forwardZ.y,   forwardZ.z, -Vector3.dotProduct(forwardZ, eye),\r\n        //     0,                   0,            0,                                  1\r\n        // );\r\n        return new Matrix4(\r\n            rightX.x, upY.x, forwardZ.x, 0,\r\n            rightX.y, upY.y, forwardZ.y, 0,\r\n            rightX.z, upY.z, forwardZ.z, 0,\r\n            -Vector3.dotProduct(rightX, eye), -Vector3.dotProduct(upY, eye), -Vector3.dotProduct(forwardZ, eye), 1\r\n        );\r\n\r\n\r\n    }\r\n    /**\r\n     * Multiply a Vector by a Matrix.\r\n     * Can be thought of as \"applying a transformation\" to a vector\r\n     * @param m The matrix\r\n     * @param v The vector\r\n     * @returns Transformed vector\r\n     */\r\n    static multiplyMatrix4ByVector4(m: Matrix4, v: Vector4): Vector4 {\r\n        return new Vector4(\r\n            // v.x * m.getElementAt(0, 0) + v.y * m.getElementAt(1, 0) + v.z * m.getElementAt(2, 0) + v.w * m.getElementAt(3, 0),\r\n            // v.x * m.getElementAt(0, 1) + v.y * m.getElementAt(1, 1) + v.z * m.getElementAt(2, 1) + v.w * m.getElementAt(3, 1),\r\n            // v.x * m.getElementAt(0, 2) + v.y * m.getElementAt(1, 2) + v.z * m.getElementAt(2, 2) + v.w * m.getElementAt(3, 2),\r\n            // v.x * m.getElementAt(0, 3) + v.y * m.getElementAt(1, 3) + v.z * m.getElementAt(2, 3) + v.w * m.getElementAt(3, 3),\r\n            v.x * m.getElementAt(0, 0) + v.y * m.getElementAt(0, 1) + v.z * m.getElementAt(0, 2) + v.w * m.getElementAt(0, 3),\r\n            v.x * m.getElementAt(1, 0) + v.y * m.getElementAt(1, 1) + v.z * m.getElementAt(1, 2) + v.w * m.getElementAt(1, 3),\r\n            v.x * m.getElementAt(2, 0) + v.y * m.getElementAt(2, 1) + v.z * m.getElementAt(2, 2) + v.w * m.getElementAt(2, 3),\r\n            v.x * m.getElementAt(3, 0) + v.y * m.getElementAt(3, 1) + v.z * m.getElementAt(3, 2) + v.w * m.getElementAt(3, 3),\r\n        );\r\n    }\r\n    /**\r\n     * Multiply two matrices.\r\n     * Can be thought of as \"accumulating matrices transformations\"\r\n     * @param a Some matrix\r\n     * @param b Some other matrix\r\n     * @returns Multiplied matrix\r\n     */\r\n    static multiplyMatrices4(a: Matrix4, b: Matrix4): Matrix4 {\r\n        let multiplied = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let value = (b.getElementAt(i, 0) * a.getElementAt(0, j)) +\r\n                    (b.getElementAt(i, 1) * a.getElementAt(1, j)) +\r\n                    (b.getElementAt(i, 2) * a.getElementAt(2, j)) +\r\n                    (b.getElementAt(i, 3) * a.getElementAt(3, j));\r\n                multiplied.setElementAt(i, j, value);\r\n            }\r\n        }\r\n        return multiplied;\r\n    }\r\n    /**\r\n     * Transpose a matrix. \r\n     * Rows become columns and vice versa\r\n     * @param m the matrix\r\n     * @returns transposed matrix\r\n     */\r\n    static transpose(m: Matrix4): Matrix4 {\r\n        let transposed = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                transposed.setElementAt(i, j, m.getElementAt(j, i));\r\n            }\r\n        }\r\n        return transposed;\r\n    }\r\n\r\n    static copy(m: Matrix4): Matrix4 {\r\n        let copied = new Matrix4();\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                copied.setElementAt(i, j, m.getElementAt(i, j));\r\n            }\r\n        }\r\n        return copied;\r\n    }\r\n\r\n    static inverse(m: Matrix4): Matrix4 {\r\n        //matrix inverse from https://webglfundamentals.org/\r\n        //this.elements[(col * 4) + row];\r\n        let m00 = m.getElementAt(0, 0);\r\n        let m01 = m.getElementAt(1, 0);\r\n        let m02 = m.getElementAt(2, 0);\r\n        let m03 = m.getElementAt(3, 0);\r\n        let m10 = m.getElementAt(0, 1);\r\n        let m11 = m.getElementAt(1, 1);\r\n        let m12 = m.getElementAt(2, 1);\r\n        let m13 = m.getElementAt(3, 1);\r\n        let m20 = m.getElementAt(0, 2);\r\n        let m21 = m.getElementAt(1, 2);\r\n        let m22 = m.getElementAt(2, 2);\r\n        let m23 = m.getElementAt(3, 2);\r\n        let m30 = m.getElementAt(0, 3);\r\n        let m31 = m.getElementAt(1, 3);\r\n        let m32 = m.getElementAt(2, 3);\r\n        let m33 = m.getElementAt(3, 3);\r\n\r\n        let tmp_0 = m22 * m33;\r\n        let tmp_1 = m32 * m23;\r\n        let tmp_2 = m12 * m33;\r\n        let tmp_3 = m32 * m13;\r\n        let tmp_4 = m12 * m23;\r\n        let tmp_5 = m22 * m13;\r\n        let tmp_6 = m02 * m33;\r\n        let tmp_7 = m32 * m03;\r\n        let tmp_8 = m02 * m23;\r\n        let tmp_9 = m22 * m03;\r\n        let tmp_10 = m02 * m13;\r\n        let tmp_11 = m12 * m03;\r\n        let tmp_12 = m20 * m31;\r\n        let tmp_13 = m30 * m21;\r\n        let tmp_14 = m10 * m31;\r\n        let tmp_15 = m30 * m11;\r\n        let tmp_16 = m10 * m21;\r\n        let tmp_17 = m20 * m11;\r\n        let tmp_18 = m00 * m31;\r\n        let tmp_19 = m30 * m01;\r\n        let tmp_20 = m00 * m21;\r\n        let tmp_21 = m20 * m01;\r\n        let tmp_22 = m00 * m11;\r\n        let tmp_23 = m10 * m01;\r\n\r\n        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\r\n            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\r\n        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\r\n            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\r\n        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\r\n            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\r\n        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\r\n            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\r\n\r\n        var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\r\n\r\n        return new Matrix4(\r\n            d * t0,\r\n            d * t1,\r\n            d * t2,\r\n            d * t3,\r\n            d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\r\n                (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30)),\r\n            d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\r\n                (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30)),\r\n            d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\r\n                (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30)),\r\n            d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\r\n                (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20)),\r\n            d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\r\n                (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33)),\r\n            d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\r\n                (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33)),\r\n            d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\r\n                (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33)),\r\n            d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\r\n                (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23)),\r\n            d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\r\n                (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22)),\r\n            d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\r\n                (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02)),\r\n            d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\r\n                (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12)),\r\n            d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\r\n                (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02))\r\n        );\r\n    }\r\n    static compose(translation: Vector3, scale: Vector3, quaternion: Vector4): Matrix4 {\r\n        let result = Matrix4.makeIdentity();\r\n\r\n        const x2 = quaternion.x + quaternion.x;\r\n        const y2 = quaternion.y + quaternion.y;\r\n        const z2 = quaternion.z + quaternion.z;\r\n\r\n        const xx = quaternion.x * x2;\r\n        const xy = quaternion.x * y2;\r\n        const xz = quaternion.x * z2;\r\n\r\n        const yy = quaternion.y * y2;\r\n        const yz = quaternion.y * z2;\r\n        const zz = quaternion.z * z2;\r\n\r\n        const wx = quaternion.w * x2;\r\n        const wy = quaternion.w * y2;\r\n        const wz = quaternion.w * z2;\r\n\r\n        result.elements[0] = (1 - (yy + zz)) * scale.x;\r\n        result.elements[1] = (xy + wz) * scale.x;\r\n        result.elements[2] = (xz - wy) * scale.x;\r\n        result.elements[3] = 0;\r\n    \r\n        result.elements[4] = (xy - wz) * scale.y;\r\n        result.elements[5] = (1 - (xx + zz)) * scale.y;\r\n        result.elements[6] = (yz + wx) * scale.y;\r\n        result.elements[7] = 0;\r\n    \r\n        result.elements[8] = (xz + wy) * scale.z;\r\n        result.elements[9] = (yz - wx) * scale.z;\r\n        result.elements[10] = (1 - (xx + yy)) * scale.z;\r\n        result.elements[11] = 0;\r\n    \r\n        result.elements[12] = translation.x;\r\n        result.elements[13] = translation.y;\r\n        result.elements[14] = translation.z;\r\n        result.elements[15] = 1;\r\n        \r\n        return result;\r\n    }\r\n    \r\n}","import { lerp } from \"../Etc/mathFunctions\";\r\nimport { Matrix4 } from \"./matrix\";\r\nimport { Vector3, Vector4 } from \"./vector\";\r\n\r\n//Quaternions are a way to represent rotation (among other transformations)\r\n//for future reference: \r\n// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/\r\n// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n// https://www.youtube.com/watch?v=d4EgbgTm0Bg\r\n\r\n// Quaternions are too much for my limited knowledge right now...\r\n// Im not really comfortable with all the maths going on here, i might come back later to try and understand \r\n// The code here is mostly ported from http://www.euclideanspace.com\r\n// Altough quaternions can represent other transformations, we are only representing rotation here...\r\nexport class Quaternion {\r\n    x: number; // imaginary-i\r\n    y: number; // imaginary-j\r\n    z: number; // imaginary-k\r\n    w: number; // real part\r\n    constructor(x?: number, y?: number, z?: number, w?: number) {\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n        this.z = z ?? 0;\r\n        this.w = w ?? 1;\r\n        this.normalize();\r\n    }\r\n    normalize(): void {\r\n        //vector-like normalization...\r\n        //find the \"vector\" magnitude, then divide by magnitude\r\n        const magnitude = Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z) + (this.w * this.w));\r\n\r\n        if (magnitude > 0) {\r\n            this.x /= magnitude;\r\n            this.y /= magnitude;\r\n            this.z /= magnitude;\r\n            this.w /= magnitude;\r\n        }\r\n    }\r\n    conjugate(): void {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        this.w = -this.w;\r\n    }\r\n\r\n    //heading: y-axis\r\n    //attitude: z-axis\r\n    //bank: x-axis\r\n    //assuming angles in radians here\r\n    rotate(x: number, y: number, z: number): void {\r\n        const c1 = Math.cos(y / 2);\r\n        const s1 = Math.sin(y / 2);\r\n        const c2 = Math.cos(z / 2);\r\n        const s2 = Math.sin(z / 2);\r\n        const c3 = Math.cos(x / 2);\r\n        const s3 = Math.sin(x / 2);\r\n        const c1c2 = c1 * c2;\r\n        const s1s2 = s1 * s2;\r\n\r\n        let q = new Quaternion(\r\n            c1c2 * s3 + s1s2 * c3,\r\n            s1 * c2 * c3 + c1 * s2 * s3,\r\n            c1 * s2 * c3 - s1 * c2 * s3,\r\n            c1c2 * c3 - s1s2 * s3\r\n        );\r\n\r\n        this.multiply(q);\r\n\r\n\r\n        // this.w = c1c2 * c3 - s1s2 * s3;\r\n        // this.x = c1c2 * s3 + s1s2 * c3;\r\n        // this.y = s1 * c2 * c3 + c1 * s2 * s3;\r\n        // this.z = c1 * s2 * c3 - s1 * c2 * s3;\r\n    }\r\n\r\n    multiply(q: Quaternion) {\r\n        // this.x = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\r\n        // this.y = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;\r\n        // this.z - this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;\r\n        // this.w = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;\r\n        this.x = q.x * this.w + q.y * this.z - q.z * this.y + q.w * this.x;\r\n        this.y = -q.x * this.z + q.y * this.w + q.z * this.x + q.w * this.y;\r\n        this.z = q.x * this.y - q.y * this.x + q.z * this.w + q.w * this.z;\r\n        this.w = -q.x * this.x - q.y * this.y - q.z * this.z + q.w * this.w;\r\n\r\n    }\r\n    /**\r\n     * Convert from quaternion to a rotation matrix\r\n     * @returns \r\n     */\r\n    toMatrix4(): Matrix4 {\r\n        this.normalize(); // to represent rotations, quaternions must be normalized, or will mess up the scale and/or translation!\r\n\r\n        let sqw = this.w * this.w;\r\n        let sqx = this.x * this.x;\r\n        let sqy = this.y * this.y;\r\n        let sqz = this.z * this.z;\r\n\r\n        let m00 = (sqx - sqy - sqz + sqw);\r\n        let m11 = (-sqx + sqy - sqz + sqw);\r\n        let m22 = (-sqx - sqy + sqz + sqw);\r\n\r\n        let tmp1 = this.x * this.y;\r\n        let tmp2 = this.z * this.w;\r\n        let m10 = 2.0 * (tmp1 + tmp2);\r\n        let m01 = 2.0 * (tmp1 - tmp2);\r\n\r\n        tmp1 = this.x * this.z;\r\n        tmp2 = this.y * this.w;\r\n        let m20 = 2.0 * (tmp1 - tmp2);\r\n        let m02 = 2.0 * (tmp1 + tmp2);\r\n        tmp1 = this.y * this.z;\r\n        tmp2 = this.x * this.w;\r\n        let m21 = 2.0 * (tmp1 + tmp2);\r\n        let m12 = 2.0 * (tmp1 - tmp2);\r\n\r\n        // return new Matrix4(\r\n        //     m00, m01, m02, 0,\r\n        //     m10, m11, m12, 0,\r\n        //     m20, m21, m22, 0,\r\n        //     0, 0, 0, 1\r\n        // );\r\n        return new Matrix4(\r\n            m00, m10, m20, 0,\r\n            m01, m11, m21, 0,\r\n            m02, m12, m22, 0,\r\n            0, 0, 0, 1\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * Extracts rotation components from a matrix 4x4\r\n     * @param m \r\n     * @returns \r\n     */\r\n    static fromMatrix4(m: Matrix4): Quaternion {\r\n        let x: number;\r\n        let y: number;\r\n        let z: number;\r\n        let w: number;\r\n\r\n        const diagonal = m.getElementAt(0, 0) + m.getElementAt(1, 1) + m.getElementAt(2, 2);\r\n        if (diagonal > 0) {\r\n            let w4 = (Math.sqrt(diagonal + 1) * 2);\r\n            x = (m.getElementAt(2, 1) - m.getElementAt(1, 2)) / w4;\r\n            y = (m.getElementAt(0, 2) - m.getElementAt(2, 0)) / w4;\r\n            z = (m.getElementAt(1, 0) - m.getElementAt(0, 1)) / w4;\r\n            w = w4 / 4;\r\n        } else if ((m.getElementAt(0, 0) > m.getElementAt(1, 1)) && (m.getElementAt(0, 0) > m.getElementAt(2, 2))) {\r\n            const x4 = (Math.sqrt(1 + m.getElementAt(0, 0) - m.getElementAt(1, 1) - m.getElementAt(2, 2)) * 2);\r\n            x = x4 / 4;\r\n            y = (m.getElementAt(0, 1) + m.getElementAt(1, 0)) / x4;\r\n            z = (m.getElementAt(0, 2) + m.getElementAt(2, 0)) / x4;\r\n            w = (m.getElementAt(2, 1) - m.getElementAt(1, 2)) / x4;\r\n        } else if (m.getElementAt(1, 1) > m.getElementAt(2, 2)) {\r\n            const y4 = (Math.sqrt(1 + m.getElementAt(1, 1) - m.getElementAt(0, 0) - m.getElementAt(2, 2)) * 2);\r\n            x = (m.getElementAt(0, 1) + m.getElementAt(1, 0)) / y4;\r\n            y = y4 / 4;\r\n            z = (m.getElementAt(1, 2) + m.getElementAt(2, 1)) / y4;\r\n            w = (m.getElementAt(0, 2) - m.getElementAt(2, 0)) / y4;\r\n        } else {\r\n            const z4 = (Math.sqrt(1 + m.getElementAt(2, 2) - m.getElementAt(0, 0) - m.getElementAt(1, 1)) * 2);\r\n            x = (m.getElementAt(0, 2) + m.getElementAt(2, 0)) / z4;\r\n            y = (m.getElementAt(1, 2) + m.getElementAt(2, 1)) / z4;\r\n            z = z4 / 4;\r\n            w = (m.getElementAt(1, 0) - m.getElementAt(0, 1)) / z4;\r\n        }\r\n        return new Quaternion(x, y, z, w);\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param a 'from' parameter\r\n     * @param b 'to' parameter\r\n     * @param step step between 0 ~ 1. 0 returns a, 1 returns b, 0.5 returns the midpoint between a and b\r\n     * @returns \r\n     */\r\n    static interpolate(a: Quaternion, b: Quaternion, step: number): Quaternion {\r\n\r\n        let q = new Quaternion();\r\n        const cosHalfTheta = (a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w);\r\n        if (Math.abs(cosHalfTheta) >= 1.0) {\r\n            q.w = a.w;\r\n            q.x = a.x;\r\n            q.y = a.y;\r\n            q.z = a.z;\r\n            return q;\r\n        }\r\n\r\n        const halfTheta = Math.acos(cosHalfTheta);\r\n        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\r\n        // if theta = 180 degrees then result is not fully defined\r\n        // we could rotate around any axis normal to qa or qb\r\n        if (Math.abs(sinHalfTheta) < 0.00001) { // fabs is floating point absolute\r\n            q.w = (a.w * 0.5 + q.w * 0.5);\r\n            q.x = (a.x * 0.5 + q.x * 0.5);\r\n            q.y = (a.y * 0.5 + q.y * 0.5);\r\n            q.z = (a.z * 0.5 + q.z * 0.5);\r\n            return q;\r\n        }\r\n\r\n        const ratioA = Math.sin((1 - step) * halfTheta) / sinHalfTheta;\r\n        const ratioB = Math.sin(step * halfTheta) / sinHalfTheta;\r\n        //calculate Quaternion.\r\n        q.w = (a.w * ratioA + b.w * ratioB);\r\n        q.x = (a.x * ratioA + b.x * ratioB);\r\n        q.y = (a.y * ratioA + b.y * ratioB);\r\n        q.z = (a.z * ratioA + b.z * ratioB);\r\n        return q;\r\n\r\n        // let q = new Quaternion(0, 0, 0, 1);\r\n        // //vector-like dot product\r\n\r\n        // const dotProduct = (a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w);\r\n\r\n        // if (dotProduct < 0) {\r\n        //     q.x = lerp(a.x, -b.x, step);\r\n        //     q.y = lerp(a.x, -b.y, step);\r\n        //     q.z = lerp(a.x, -b.z, step);\r\n        //     q.w = lerp(a.x, -b.w, step);\r\n        // } else {\r\n        //     q.x = lerp(a.x, b.x, step);\r\n        //     q.y = lerp(a.x, b.y, step);\r\n        //     q.z = lerp(a.x, b.z, step);\r\n        //     q.w = lerp(a.x, b.w, step);\r\n        // }\r\n        // q.normalize();\r\n        // return q;\r\n    }\r\n\r\n}","import { Matrix4 } from \"./Rendering/matrix\";\r\nimport { Quaternion } from \"./Rendering/quaternion\";\r\nimport { Vector3, Vector4 } from \"./Rendering/vector\";\r\n\r\nexport class Transform {\r\n    position: Vector3;\r\n    rotation: Quaternion;\r\n    scale: Vector3;\r\n    private _up: Vector3;\r\n    private _right: Vector3;\r\n    private _forward: Vector3;\r\n    private shouldComputeDirections: boolean;\r\n    private worldMatrix: Matrix4;\r\n    private localMatrix: Matrix4;\r\n\r\n    get up(): Vector3 {\r\n        this.computeDirectionVectors();\r\n        return this._up;\r\n    }\r\n\r\n    get right(): Vector3 {\r\n        this.computeDirectionVectors();\r\n        return this._right;\r\n    }\r\n\r\n    get forward(): Vector3 {\r\n        this.computeDirectionVectors();\r\n        return this._forward;\r\n    }\r\n\r\n    constructor(position?: Vector3, rotation?: Quaternion, scale?: Vector3) {\r\n        this.reset(position, rotation, scale);\r\n    }\r\n\r\n    reset(position?: Vector3, rotation?: Quaternion, scale?: Vector3): void {\r\n        this.position = position ?? new Vector3();\r\n        this.rotation = rotation ?? new Quaternion();\r\n        this.scale = scale ?? new Vector3(1, 1, 1);\r\n        this._forward = Vector3.forward;\r\n        this._right = Vector3.right;\r\n        this._up = Vector3.up;\r\n        this.shouldComputeDirections = true;\r\n    }\r\n\r\n    computeDirectionVectors(): void {\r\n        if (!this.shouldComputeDirections) return;\r\n\r\n        //1. make rotation matrices\r\n        // let rotationZMatrix = Matrix4.makeZRotation(this.rotation.z);\r\n        // let rotationYMatrix = Matrix4.makeYRotation(this.rotation.y);\r\n        // let rotationXMatrix = Matrix4.makeXRotation(this.rotation.x);\r\n\r\n        // let rotationMatrix = Matrix4.multiplyMatrices4(rotationYMatrix, rotationZMatrix);\r\n        // rotationMatrix = Matrix4.multiplyMatrices4(rotationXMatrix, rotationMatrix);\r\n        let rotationMatrix = this.rotation.toMatrix4();\r\n        //2. multiply direction vectors by the matrix\r\n        this._up = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.up) as Vector3;\r\n        this._forward = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.forward) as Vector3;\r\n        this._right = Matrix4.multiplyMatrix4ByVector4(rotationMatrix, Vector4.right) as Vector3;\r\n        this.shouldComputeDirections = false;\r\n    }\r\n\r\n    translate(translation: Vector3): void {\r\n        this.position = Vector3.add(this.position, translation);\r\n    }\r\n\r\n    rotate(angles: Vector3): void {\r\n        //this.rotation = Vector3.add(this.rotation, angles);\r\n\r\n\r\n        this.rotation.rotate(angles.x, angles.y, angles.z);\r\n        this.shouldComputeDirections = true; //direction vectors will be computed lazily when needed\r\n    }\r\n\r\n    setRotation(angles: Vector3): void {\r\n        this.rotation = new Quaternion();\r\n        this.rotation.rotate(angles.x, angles.y, angles.z);\r\n        this.shouldComputeDirections = true; //direction vectors will be computed lazily when needed\r\n    }\r\n\r\n    // rotateAround(angles: number, target: Vector3, axis: Vector3): void {\r\n    //     // let rotateAroundMatrix = Matrix4.makeIdentity();\r\n\r\n    //     // let toTargetTranslationMatrix = Matrix4.makeTranslation(-target.x, -target.y, -target.z);\r\n    //     // let backInplaceMatrix = Matrix4.makeTranslation(target.x, target.y, target.z);\r\n\r\n    //     // let xRotationMatrix = Matrix4.makeXRotation(axis.x * angles);\r\n    //     // let yRotationMatrix = Matrix4.makeYRotation(axis.y * angles);\r\n    //     // let zRotationMatrix = Matrix4.makeZRotation(axis.z * angles);\r\n\r\n    //     // rotateAroundMatrix = Matrix4.multiplyMatrices4(backInplaceMatrix, rotateAroundMatrix);\r\n    //     // rotateAroundMatrix = Matrix4.multiplyMatrices4(zRotationMatrix, rotateAroundMatrix);\r\n    //     // rotateAroundMatrix = Matrix4.multiplyMatrices4(yRotationMatrix, rotateAroundMatrix);\r\n    //     // rotateAroundMatrix = Matrix4.multiplyMatrices4(xRotationMatrix, rotateAroundMatrix);\r\n    //     // rotateAroundMatrix = Matrix4.multiplyMatrices4(toTargetTranslationMatrix, rotateAroundMatrix);\r\n\r\n    //     // this.position = Matrix4.multiplyMatrix4ByVector4(rotateAroundMatrix, new Vector4(this.position.x, this.position.y, this.position.z)) as Vector3;\r\n\r\n    //     //this.computeDirectionVectors();\r\n    // }\r\n\r\n    updateLocalMatrix(): void {\r\n        this.localMatrix = Matrix4.makeIdentity();\r\n        let translationMatrix = Matrix4.makeTranslation(this.position.x, this.position.y, this.position.z);\r\n        // let XRotationMatrix = Matrix4.makeXRotation(this.rotation.x);\r\n        // let yRotationMatrix = Matrix4.makeYRotation(this.rotation.y);\r\n        // let zRotationMatrix = Matrix4.makeZRotation(this.rotation.z);\r\n        let rotationMatrix = this.rotation.toMatrix4();\r\n        let scaleMatrix = Matrix4.makeScale(this.scale.x, this.scale.y, this.scale.z);\r\n\r\n        this.localMatrix = Matrix4.multiplyMatrices4(translationMatrix, this.localMatrix);\r\n        //this.localMatrix = Matrix4.multiplyMatrices4(XRotationMatrix, this.localMatrix);\r\n        //this.localMatrix = Matrix4.multiplyMatrices4(yRotationMatrix, this.localMatrix);\r\n        //this.localMatrix = Matrix4.multiplyMatrices4(zRotationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(rotationMatrix, this.localMatrix);\r\n        this.localMatrix = Matrix4.multiplyMatrices4(scaleMatrix, this.localMatrix);\r\n\r\n        //this.localMatrix = Matrix4.compose(this.position, this.scale, this.rotation);\r\n    }\r\n\r\n    updateWorldMatrix(parentMatrix?: Matrix4): void {\r\n        if (parentMatrix)\r\n            this.worldMatrix = Matrix4.multiplyMatrices4(this.localMatrix, parentMatrix);\r\n        else\r\n            this.worldMatrix = Matrix4.copy(this.localMatrix);\r\n    }\r\n\r\n    getWorldMatrix(): Matrix4 {\r\n        return this.worldMatrix;\r\n    }\r\n    getLocalMatrix(): Matrix4 {\r\n        return this.localMatrix;\r\n    }\r\n\r\n    // lookAt(target: Vector3, up: Vector3): void {\r\n    //     let lookAtMatrix = Matrix4.makeLookAtMatrix(this.position, target, Vector3.up);\r\n    //     this.rotation = Matrix4.multiplyMatrix4ByVector4(lookAtMatrix, new Vector4(this.rotation.x, this.rotation.y, this.rotation.z)) as Vector3;\r\n    // }\r\n}","import { Transform } from \"../transform\";\r\n\r\n//TODO: Maybe refactor this into a generic type like \"Treeish<T>\"\r\nexport interface TreeNode { // originally it was going to be \"Node\", but it was taken by the DOM \"Node\"\r\n    transform: Transform;\r\n    parent: TreeNode;\r\n    children: TreeNode[];\r\n    setParent(parent: TreeNode): void;\r\n    addChild(child: TreeNode): void;\r\n    updateTransforms(): void;\r\n}\r\n\r\nexport abstract class BaseNode implements TreeNode {\r\n    transform: Transform;\r\n    parent: TreeNode;\r\n    children: TreeNode[];\r\n\r\n    constructor(transform?: Transform) {\r\n        this.transform = transform ?? new Transform();\r\n        this.children = [];\r\n    }\r\n\r\n    setParent(parent: TreeNode): void {\r\n        //remove this node from previous parent\r\n        if (this.parent) {\r\n            let index = this.parent.children.indexOf(this);\r\n            if (index >= 0) {\r\n                this.parent.children.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        // Add this node as child of the new parent\r\n        if (parent) {\r\n            parent.addChild(this);\r\n        }\r\n        this.parent = parent;\r\n    }\r\n    addChild(child: TreeNode): void {\r\n        this.children.push(child);\r\n    }\r\n    updateTransforms(): void {\r\n        this.transform.updateLocalMatrix();\r\n\r\n        if (this.parent) {\r\n            let parentMatrix = this.parent.transform.getWorldMatrix();\r\n            this.transform.updateWorldMatrix(parentMatrix);\r\n        } else {\r\n            this.transform.updateWorldMatrix();\r\n        }\r\n\r\n        this.children.forEach(child => {\r\n            child.updateTransforms();\r\n        });\r\n    }\r\n}","import { Transform } from \"../transform\";\r\nimport { Camera } from \"./camera\";\r\nimport { BaseNode } from \"./node\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nexport abstract class Model extends BaseNode {\r\n    renderer: Renderer;\r\n\r\n    constructor(renderer: Renderer, transform?: Transform) {\r\n        super(transform);\r\n        this.renderer = renderer;\r\n    }\r\n    protected bufferData(buffer: WebGLBuffer, data: BufferSource, bufferType: number) {\r\n        let ctx = this.renderer.getContext();\r\n        ctx.bindBuffer(bufferType, buffer);\r\n        ctx.bufferData(bufferType, data, WebGLRenderingContext.STATIC_DRAW);\r\n    }\r\n    render(camera: Camera): void {\r\n        this.renderer.render(this, camera);\r\n    }\r\n    abstract update(): void;\r\n}","import { Matrix4 } from \"../Rendering/matrix\";\r\nimport { Quaternion } from \"../Rendering/quaternion\";\r\nimport { Vector3 } from \"../Rendering/vector\";\r\n\r\n\r\n//A list of JointTransform, represent the \"pose\" of the model\r\n//A JointTransform holds position and rotation relative to the parent joint(or the origin if it is the root)\r\nexport class JointTransform {\r\n    position: Vector3;\r\n    rotation: Quaternion;\r\n    scale: Vector3;\r\n    constructor(position: Vector3, rotation: Quaternion, scale: Vector3) {\r\n        this.position = position;\r\n        this.rotation = rotation;\r\n        this.scale = scale;\r\n    }\r\n\r\n    getLocalMatrix(): Matrix4 {\r\n        let localMatrix = Matrix4.makeIdentity();\r\n        let translationMatrix = Matrix4.makeTranslation(this.position.x, this.position.y, this.position.z);\r\n        let rotationMatrix = this.rotation.toMatrix4();\r\n        let scaleMatrix = Matrix4.makeScale(this.scale.x, this.scale.y, this.scale.z);\r\n\r\n        localMatrix = Matrix4.multiplyMatrices4(translationMatrix, localMatrix);\r\n        localMatrix = Matrix4.multiplyMatrices4(rotationMatrix, localMatrix);\r\n        localMatrix = Matrix4.multiplyMatrices4(scaleMatrix, localMatrix);\r\n\r\n        return localMatrix;\r\n    }\r\n\r\n    static interpolate(a: JointTransform, b: JointTransform, step: number): JointTransform {\r\n        return new JointTransform(\r\n            Vector3.interpolate(a.position, b.position, step),\r\n            Quaternion.interpolate(a.rotation, b.rotation, step),\r\n            Vector3.interpolate(a.scale, b.scale, step),\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","export class Time {\r\n    static deltaTime = 0;\r\n    static time = 0;\r\n    \r\n    static computeTime(now: number) {\r\n        now *=  0.001;\r\n        this.deltaTime = now - this.time;\r\n        this.time = now;\r\n    }\r\n}\r\n","import { Matrix4 } from \"../Rendering/matrix\";\r\nimport { HumbleAnimation } from \"./animation\";\r\nimport { Joint } from \"./joint\";\r\nimport { JointTransform } from \"./JointTransform\";\r\nimport { HumbleKeyframe, Pose } from \"./keyframe\";\r\nimport { degToRad } from \"../Etc/mathFunctions\";\r\nimport { AnimatedModel } from \"./animatedModel\";\r\nimport { Time } from \"../time\";\r\n\r\nexport class Animator {\r\n    animation: HumbleAnimation;\r\n    currentTime: number;\r\n    model: AnimatedModel;\r\n    constructor(model: AnimatedModel) {\r\n        this.model = model;\r\n    }\r\n\r\n    //set, or reset an animation\r\n    doAnimation(animation: HumbleAnimation): void {\r\n        this.currentTime = 0;\r\n        this.animation = animation;\r\n    }\r\n\r\n    update(): void {\r\n        if (this.animation) {\r\n            this.increaseAnimationTime(Time.deltaTime);\r\n            let currentPose = this.computeCurrentAnimationPose();\r\n            //this.applyPoseToJoints(currentPose, this.model.rootJoint, Matrix4.makeIdentity());\r\n            this.applyPoseToJoints(currentPose, this.model.rootJoint, this.model.transform.getWorldMatrix());\r\n        }\r\n    }\r\n\r\n    //increase time and, loop around when it ends\r\n    increaseAnimationTime(deltaTime: number): void {\r\n        this.currentTime += deltaTime;\r\n        if (this.currentTime > this.animation.lengthInSeconds) {\r\n            this.currentTime %= this.animation.lengthInSeconds;\r\n        }\r\n    }\r\n\r\n    computeCurrentAnimationPose(): Pose {\r\n        let [previousFrame, nextFrame] = this.getPreviousAndNextFrames();\r\n        let step = this.calculateProgression(previousFrame, nextFrame);\r\n        return this.interpolatePoses(previousFrame, nextFrame, step);\r\n    }\r\n\r\n    applyPoseToJoints(currentPose: Pose, joint: Joint, parentMatrix: Matrix4): void {\r\n        let currentTransform = currentPose[joint.name];\r\n        let currentMatrix = Matrix4.multiplyMatrices4(currentTransform.getLocalMatrix(), parentMatrix);\r\n\r\n        joint.children.forEach(child => {\r\n            this.applyPoseToJoints(currentPose, child as Joint, currentMatrix);\r\n        });\r\n\r\n        joint.animatedMatrix = Matrix4.multiplyMatrices4(joint.inverseBindMatrix, currentMatrix);\r\n    }\r\n\r\n    getPreviousAndNextFrames(): [HumbleKeyframe, HumbleKeyframe] {\r\n        let allKeyFrames = this.animation.keyframes;\r\n        let previous = allKeyFrames[0];\r\n        let next = allKeyFrames[0];\r\n\r\n        for (let i = 1; i < allKeyFrames.length; i++) {\r\n            next = allKeyFrames[i];\r\n            if (next.timestamp > this.currentTime) {\r\n                break;\r\n            }\r\n            previous = allKeyFrames[i];\r\n        }\r\n\r\n        return [previous, next];\r\n    }\r\n\r\n    calculateProgression(previousFrame: HumbleKeyframe, nextFrame: HumbleKeyframe) {\r\n        let totalTime = nextFrame.timestamp - previousFrame.timestamp;\r\n        let currentTime = this.currentTime - previousFrame.timestamp\r\n\r\n        return currentTime / totalTime;\r\n    }\r\n\r\n    interpolatePoses(previousFrame: HumbleKeyframe, nextFrame: HumbleKeyframe, step: number) {\r\n        let currentPose: Pose = {} as Pose;\r\n        //foreach joint transform, interpolate between previous and next keyframe, then return a new interpolated \"Pose\"\r\n        for (const key in previousFrame.pose) {\r\n            currentPose[key] = JointTransform.interpolate(previousFrame.pose[key], nextFrame.pose[key], step);\r\n        }\r\n        return currentPose;\r\n    }\r\n}\r\n\r\n","import { Matrix4 } from \"../Rendering/matrix\";\r\nimport { Model } from \"../Rendering/model\";\r\nimport { Renderer } from \"../Rendering/renderer\";\r\nimport { Time } from \"../time\";\r\nimport { HumbleAnimation } from \"./animation\";\r\nimport { Animator } from \"./animator\";\r\nimport { Joint } from \"./joint\";\r\n\r\nexport class AnimatedModel extends Model {\r\n    //buffers... maybe make all of those into a dictionary of <attrLocations, buffers> \r\n    positions: WebGLBuffer;\r\n    normals: WebGLBuffer;\r\n    textureCoords: WebGLBuffer;\r\n    indices: WebGLBuffer;\r\n    joints: WebGLBuffer;\r\n    weights: WebGLBuffer;\r\n    indexCount: number;\r\n    texture: WebGLTexture;\r\n\r\n    //skin data\r\n    boneTexture: WebGLTexture\r\n    rootJoint: Joint\r\n    jointCount: number;\r\n\r\n    animator: Animator;\r\n\r\n    constructor(positions: Float32Array, normals: Float32Array, textureCoords: Float32Array,\r\n        indices: Uint16Array, joints: Uint8Array, weights: Float32Array, rootJoint: Joint, jointCount: number, renderer: Renderer) {\r\n        super(renderer);\r\n        let ctx = this.renderer.getContext();\r\n        this.positions = ctx.createBuffer();\r\n        this.normals = ctx.createBuffer();\r\n        this.textureCoords = ctx.createBuffer();\r\n        this.indices = ctx.createBuffer();\r\n        this.joints = ctx.createBuffer();\r\n        this.weights = ctx.createBuffer();\r\n        this.indexCount = indices.length;\r\n\r\n        this.bufferData(this.indices, indices, WebGLRenderingContext.ELEMENT_ARRAY_BUFFER);\r\n        this.bufferData(this.positions, positions, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.normals, normals, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.textureCoords, textureCoords, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.joints, joints, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.weights, weights, WebGLRenderingContext.ARRAY_BUFFER);\r\n\r\n        //img-like texture\r\n        //this.texture = texture ?? null;\r\n        this.rootJoint = rootJoint ?? null;\r\n        this.jointCount = jointCount ?? 0;\r\n\r\n        //data-like texture\r\n        this.boneTexture = ctx.createTexture();\r\n        ctx.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.boneTexture);\r\n        ctx.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, WebGLRenderingContext.NEAREST);\r\n        ctx.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, WebGLRenderingContext.NEAREST);\r\n        ctx.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, WebGLRenderingContext.CLAMP_TO_EDGE);\r\n        ctx.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, WebGLRenderingContext.CLAMP_TO_EDGE);\r\n\r\n        if (rootJoint) {\r\n            rootJoint.setParent(this);\r\n        }\r\n        this.animator = new Animator(this);\r\n    }\r\n\r\n    doAnimation(animation: HumbleAnimation) {\r\n        this.animator.doAnimation(animation);\r\n    }\r\n\r\n    update(): void {\r\n\r\n        this.animator.update();\r\n\r\n        // let xrotation = Matrix4.makeXRotation(Math.sin(Time.time) * .5);\r\n\r\n        // animateJoints(this.rootJoint, this.transform.getWorldMatrix());\r\n        // function animateJoints(joint: Joint, parent: Matrix4) {\r\n\r\n        //     let worldBindMatrix = Matrix4.multiplyMatrices4(joint.transform.getLocalMatrix(), parent);\r\n        //     //let worldBindMatrix = joint.transform.getWorldMatrix();\r\n        //     worldBindMatrix = Matrix4.multiplyMatrices4(xrotation, worldBindMatrix);\r\n\r\n        //     joint.animatedMatrix = Matrix4.makeIdentity();\r\n        //     joint.animatedMatrix = Matrix4.multiplyMatrices4(worldBindMatrix, joint.animatedMatrix);\r\n        //     joint.animatedMatrix = Matrix4.multiplyMatrices4(joint.inverseBindMatrix, joint.animatedMatrix);\r\n\r\n        //     if (joint.children) {\r\n        //         joint.children.forEach(child => {\r\n        //             animateJoints(child as Joint, worldBindMatrix);\r\n        //         });\r\n        //     }\r\n        // }\r\n\r\n        let arr = new Float32Array(this.jointCount * 16);\r\n        flattenJointMatrices(this.rootJoint);\r\n\r\n        let ctx = this.renderer.getContext();\r\n        ctx.bindTexture(ctx.TEXTURE_2D, this.boneTexture);\r\n\r\n        ctx.texImage2D(\r\n            ctx.TEXTURE_2D, 0, ctx.RGBA, 4,\r\n            this.jointCount, 0, ctx.RGBA, ctx.FLOAT, arr\r\n        );\r\n\r\n        function flattenJointMatrices(joint: Joint) {\r\n            let offset = joint.id * 16;\r\n\r\n            arr.set(joint.animatedMatrix.flatten(), offset);\r\n            if (joint.children) {\r\n                joint.children.forEach(child => {\r\n                    flattenJointMatrices(child as Joint);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}","import { Camera } from \"./camera\";\r\nimport { Model } from \"./model\";\r\n\r\nexport interface Renderer {\r\n    render(model: Model, camera: Camera): void;\r\n    getContext(): WebGLRenderingContext;\r\n}\r\n\r\nexport abstract class BaseRenderer implements Renderer {\r\n    protected program: WebGLProgram;\r\n    protected context: WebGLRenderingContext;\r\n\r\n    constructor(context: WebGLRenderingContext, program: WebGLProgram) {\r\n        this.context = context;\r\n        this.program = program;\r\n    }\r\n    abstract render(model: Model, camera: Camera): void;\r\n    getContext(): WebGLRenderingContext {\r\n        return this.context;\r\n    }\r\n}","import { Camera } from \"../Rendering/camera\";\r\nimport { Matrix4 } from \"../Rendering/matrix\";\r\nimport { BaseRenderer } from \"../Rendering/renderer\";\r\nimport { Vector3, Vector4 } from \"../Rendering/vector\";\r\nimport { AnimatedModel } from \"./animatedModel\";\r\n\r\nexport class AnimatedRenderer extends BaseRenderer {\r\n    private positionAttributeLocation: number;\r\n    private texCoordsAttributeLocation: number;\r\n    private normalsAttributeLocation: number;\r\n    private jointsAttributeLocation: number;\r\n    private weightsAttributeLocation: number;\r\n\r\n    private worldMatrixUniformLocation: WebGLUniformLocation;\r\n    private viewMatrixUniformLocation: WebGLUniformLocation;\r\n    private projectionMatrixUniformLocation: WebGLUniformLocation;\r\n    private worldInverseTransposeMatrixLocation: WebGLUniformLocation;\r\n    private reverseLightDirectionLocation: WebGLUniformLocation;\r\n    private jointTextureLocation: WebGLUniformLocation; // data as texture\r\n    private jointCountLocation: WebGLUniformLocation;\r\n\r\n    constructor(context: WebGLRenderingContext, program: WebGLProgram) {\r\n        super(context, program);\r\n\r\n        this.positionAttributeLocation = context.getAttribLocation(program, \"a_position\");\r\n        this.texCoordsAttributeLocation = context.getAttribLocation(program, \"a_texcoord\");\r\n        this.normalsAttributeLocation = context.getAttribLocation(program, \"a_normal\");\r\n        this.jointsAttributeLocation = context.getAttribLocation(program, \"a_joints\");\r\n        this.weightsAttributeLocation = context.getAttribLocation(program, \"a_weights\");\r\n\r\n        this.worldMatrixUniformLocation = context.getUniformLocation(program, \"u_worldMatrix\");\r\n        this.viewMatrixUniformLocation = context.getUniformLocation(program, \"u_viewMatrix\");\r\n        this.projectionMatrixUniformLocation = context.getUniformLocation(program, \"u_projectionMatrix\");\r\n        this.worldInverseTransposeMatrixLocation = context.getUniformLocation(program, \"u_worldInverseTransposeMatrix\");\r\n        this.reverseLightDirectionLocation = context.getUniformLocation(program, \"u_reverseLightDirection\");\r\n\r\n        this.jointTextureLocation = context.getUniformLocation(program, \"u_jointTexture\");\r\n        this.jointCountLocation = context.getUniformLocation(program, \"u_numJoints\");\r\n    }\r\n\r\n    loadTexture(img: HTMLImageElement): WebGLTexture {\r\n        let texture = this.context.createTexture();\r\n        this.context.bindTexture(this.context.TEXTURE_2D, texture);\r\n\r\n        // Set the parameters so we can render any size image.\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_S, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_T, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MIN_FILTER, this.context.NEAREST);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MAG_FILTER, this.context.NEAREST);\r\n\r\n        // Upload the image into the texture.\r\n        this.context.texImage2D(this.context.TEXTURE_2D, 0, this.context.RGBA, this.context.RGBA, this.context.UNSIGNED_BYTE, img);\r\n        this.context.generateMipmap(this.context.TEXTURE_2D);\r\n\r\n        return texture;\r\n    }\r\n\r\n    loadTexture2(color: Vector4) {\r\n        let texture = this.context.createTexture();\r\n        this.context.bindTexture(this.context.TEXTURE_2D, texture);\r\n\r\n        // Set the parameters so we can render any size image.\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_S, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_T, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MIN_FILTER, this.context.NEAREST);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MAG_FILTER, this.context.NEAREST);\r\n\r\n        // Upload the image into the texture.\r\n        this.context.texImage2D(this.context.TEXTURE_2D, 0, this.context.RGBA, 1, 1, 0, this.context.RGBA, this.context.UNSIGNED_BYTE,\r\n            new Uint8Array([0, 0, 255, 255]));\r\n        //this.context.generateMipmap(this.context.TEXTURE_2D);\r\n\r\n        return texture;\r\n    }\r\n\r\n    clear() {\r\n        this.context.clearColor(0.5, 0.5, 0.5, 1);\r\n        this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    render(model: AnimatedModel, camera: Camera): void {\r\n        let projectionMatrix = camera.getPerspectiveMatrix();\r\n        let viewMatrix = Matrix4.makeViewMatrix(\r\n            camera.transform.position,\r\n            Vector3.add(camera.transform.position, camera.transform.forward),\r\n            Vector3.up);\r\n\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        this.context.viewport(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n        this.context.useProgram(this.program);\r\n        this.context.enable(this.context.CULL_FACE);\r\n        this.context.enable(this.context.DEPTH_TEST);\r\n\r\n        //set uniforms\r\n        this.context.uniform1i(this.jointTextureLocation, 1);  // texture unit 1\r\n        this.context.uniform1f(this.jointCountLocation, model.jointCount);  // texture unit 1\r\n        this.context.uniformMatrix4fv(this.worldMatrixUniformLocation, false, model.transform.getWorldMatrix().flatten());\r\n        this.context.uniformMatrix4fv(this.projectionMatrixUniformLocation, false, projectionMatrix.flatten());\r\n        this.context.uniformMatrix4fv(this.viewMatrixUniformLocation, false, viewMatrix.flatten());\r\n        this.context.uniform1f(this.jointCountLocation, model.jointCount);\r\n\r\n        let worldInverse = Matrix4.inverse(model.transform.getWorldMatrix());\r\n        this.context.uniformMatrix4fv(this.worldInverseTransposeMatrixLocation, false, Matrix4.transpose(worldInverse).flatten());\r\n        //TODO: use the light from Scene object\r\n        let reverseLightDirectionVector = Vector3.normalize(new Vector3(0.5, 0.7, 1));\r\n        this.context.uniform3fv(\r\n            this.reverseLightDirectionLocation,\r\n            new Float32Array([\r\n                reverseLightDirectionVector.x,\r\n                reverseLightDirectionVector.y,\r\n                reverseLightDirectionVector.z])\r\n        );\r\n\r\n        //bind buffers\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.positions);\r\n        this.context.enableVertexAttribArray(this.positionAttributeLocation);\r\n        //Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        this.context.vertexAttribPointer(\r\n            this.positionAttributeLocation,\r\n            3,          // we are passing 3 components per iteration\r\n            this.context.FLOAT,   // the type of each component\r\n            false,      // should normalize?\r\n            0,          // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0           // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.textureCoords);\r\n        this.context.enableVertexAttribArray(this.texCoordsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.texCoordsAttributeLocation,\r\n            2,         // we are passing 2 components per iteration\r\n            this.context.FLOAT,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.normals);\r\n        this.context.enableVertexAttribArray(this.normalsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.normalsAttributeLocation,\r\n            3,         // we are passing 3 components per iteration\r\n            this.context.FLOAT,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.joints);\r\n        this.context.enableVertexAttribArray(this.jointsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.jointsAttributeLocation,\r\n            4,         // we are passing 4 components per iteration\r\n            this.context.UNSIGNED_BYTE,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.weights);\r\n        this.context.enableVertexAttribArray(this.weightsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.weightsAttributeLocation,\r\n            4,         // we are passing 4 components per iteration\r\n            this.context.FLOAT,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.activeTexture(this.context.TEXTURE0);\r\n        this.context.bindTexture(this.context.TEXTURE_2D, model.texture);\r\n        this.context.activeTexture(this.context.TEXTURE1);\r\n        this.context.bindTexture(this.context.TEXTURE_2D, model.boneTexture);\r\n\r\n\r\n        this.context.drawElements(\r\n            WebGLRenderingContext.TRIANGLES,\r\n            model.indexCount,\r\n            this.context.UNSIGNED_SHORT,\r\n            0\r\n        );\r\n    }\r\n}","import { JointTransform } from \"./JointTransform\";\r\n\r\nexport class HumbleKeyframe { //Keyframe is taken =(\r\n    timestamp: number;\r\n    pose: Pose;\r\n    constructor(timestamp: number, pose: Pose) {\r\n        this.timestamp = timestamp;\r\n        this.pose = pose;\r\n    }\r\n}\r\n\r\nexport interface Pose {\r\n    [index: string]: JointTransform; //key is the joint \"name\", value is the joint transform\r\n}","import { AnimationSampleData, SkeletonAnimationData } from \"../File/fileLoader\";\r\nimport { Quaternion } from \"../Rendering/quaternion\";\r\nimport { Vector2, Vector3, Vector4 } from \"../Rendering/vector\";\r\nimport { JointTransform } from \"./JointTransform\";\r\nimport { HumbleKeyframe, Pose } from \"./keyframe\";\r\n\r\n\r\n//this holds animation data, maybe should not be a full class since we so far have no behaviour?\r\nexport class HumbleAnimation { //name Animation was taken =(\r\n    name: string;\r\n    lengthInSeconds: number;\r\n    keyframes: HumbleKeyframe[];\r\n    constructor(name: string, keyframes: HumbleKeyframe[], lengthInSeconds: number) {\r\n        this.name = name;\r\n        this.keyframes = keyframes;\r\n        this.lengthInSeconds = lengthInSeconds;\r\n    }\r\n\r\n    //TODO: maybe this should be outside this class, maybe a converter class or something?\r\n    static fromGLTFAnimation(anim: SkeletonAnimationData): HumbleAnimation {\r\n        //OK, so i am assuming that all joints have the same exact keyframes...\r\n        // maybe it is not true and i will have to comeback here and fix it.\r\n\r\n        //also, im ignoring the interpolation method and assuming its all LINEAR interpolation, since it is the only one i have implemented so far...\r\n        let lengthInSeconds = anim.animationLength;\r\n        let name = anim.animationName;\r\n\r\n        let keyframes: HumbleKeyframe[] = [];\r\n\r\n        //timestamp\r\n        //Pose\r\n        //new HumbleKeyFrame(timestamp, Pose)\r\n        //let pose:Pose\r\n        //let p: Pose = {};\r\n        //p[\"JointName\"] = new JointTransform(null, null, null);\r\n\r\n        anim.jointsAnimations[0].jointName\r\n\r\n\r\n        //build a timestamp array\r\n        let samples: AnimationSampleData[];\r\n        if (anim.jointsAnimations[0].translation.samples) {\r\n            samples = anim.jointsAnimations[0].translation.samples\r\n        } else if (anim.jointsAnimations[0].rotation.samples) {\r\n            samples = anim.jointsAnimations[0].rotation.samples\r\n        } else if (anim.jointsAnimations[0].scale.samples) {\r\n            samples = anim.jointsAnimations[0].scale.samples\r\n        }\r\n\r\n        let timestamps = samples.map((s) => {\r\n            return s.timestamp;\r\n        });\r\n\r\n\r\n        //p[\"JointName\"] = new JointTransform(null, null, null);\r\n        //for each timestamp, lets build a Pose (which is a dictionary of <jointName, JointTransform> )\r\n        timestamps.forEach((t, i) => {\r\n            let p: Pose = {};\r\n            anim.jointsAnimations.forEach((jointAnimation) => {\r\n                //jointAnimation.jointName\r\n                let position = new Vector3(jointAnimation.translation.samples[i].values[0], jointAnimation.translation.samples[i].values[1], jointAnimation.translation.samples[i].values[2]);\r\n                let rotation = new Quaternion(jointAnimation.rotation.samples[i].values[0], jointAnimation.rotation.samples[i].values[1], jointAnimation.rotation.samples[i].values[2], jointAnimation.rotation.samples[i].values[3]);\r\n                let scale = new Vector3(jointAnimation.scale.samples[i].values[0], jointAnimation.scale.samples[i].values[1], jointAnimation.scale.samples[i].values[2]);\r\n                p[jointAnimation.jointName] = new JointTransform(position, rotation, scale);\r\n            });\r\n            keyframes.push(new HumbleKeyframe(t, p));\r\n        });\r\n\r\n        console.log(\"HumbleAnimation\", name, keyframes, lengthInSeconds);\r\n\r\n        return new HumbleAnimation(name, keyframes, lengthInSeconds);\r\n    }\r\n}","export class webglUtils {\r\n\r\n    static loadFromScript(gl: WebGLRenderingContext, shaderElem: HTMLScriptElement, shaderType: GLenum): WebGLShader {\r\n        let shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, shaderElem.text);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.error(\"Something went wrong when compiling a vertex shader. More info:\", gl.getShaderInfoLog(shader));\r\n            return;\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    static createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\r\n        let program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.error(\"Something went wrong when compiling a vertex shader. More info:\", gl.getShaderInfoLog(program));\r\n            gl.deleteProgram(program);\r\n            return null;\r\n        }\r\n        return program;\r\n    }\r\n}","import { Matrix4 } from \"../Rendering/matrix\";\r\nimport { BaseNode } from \"../Rendering/node\";\r\nimport { Transform } from \"../transform\";\r\n\r\nexport class Joint extends BaseNode {\r\n    id: number;\r\n    name: string;\r\n    inverseBindMatrix: Matrix4;\r\n    animatedMatrix: Matrix4;\r\n    constructor(id: number, name: string, transform: Transform, inverseMatrix: Matrix4) {\r\n        super(transform);\r\n        this.id = id;\r\n        this.name = name;\r\n        this.inverseBindMatrix = inverseMatrix;\r\n    }\r\n}","import { Transform } from \"../transform\";\r\nimport { Matrix4 } from \"./matrix\";\r\n\r\n\r\n//TODO: this camera class can only represent a perspective camera...\r\n//      make so we can represent other types(like ortho?) of cameras...\r\n//      maybe, create specialized types extending this 'base' camera?\r\nexport class Camera {\r\n    transform: Transform;\r\n    fieldOfView: number;\r\n    aspectRatio: number;\r\n    near: number;\r\n    far: number;\r\n    private perspectiveMatrix: Matrix4;\r\n    private static activeCamera: Camera = null;\r\n    constructor(fieldOfView: number, aspectRatio: number, near: number, far: number) {\r\n        this.fieldOfView = fieldOfView;\r\n        this.aspectRatio = aspectRatio;\r\n        this.near = near;\r\n        this.far = far;\r\n        this.transform = new Transform();\r\n\r\n        if (Camera.getActiveCamera() === null) {\r\n            Camera.setActiveCamera(this);\r\n        }\r\n    }\r\n    computePerspectiveMatrix(): void {\r\n        this.perspectiveMatrix = Matrix4.makePerspective(\r\n            this.fieldOfView,\r\n            this.aspectRatio,\r\n            this.near,\r\n            this.far\r\n        );\r\n    }\r\n    getPerspectiveMatrix(): Matrix4 {\r\n        return this.perspectiveMatrix;\r\n    }\r\n    static getActiveCamera(): Camera {\r\n        return Camera.activeCamera;\r\n    }\r\n    static setActiveCamera(camera: Camera): void {\r\n        Camera.activeCamera = camera;\r\n    }\r\n}\r\n\r\n","import { AnimatedModel } from \"./Animation/animatedModel\";\r\nimport { AnimatedRenderer } from \"./Animation/animatedRenderer\";\r\nimport { HumbleAnimation } from \"./Animation/animation\";\r\nimport { degToRad } from \"./Etc/mathFunctions\";\r\nimport { webglUtils } from \"./Etc/webglUtils\";\r\nimport { FileLoader } from \"./File/fileLoader\";\r\nimport { Camera } from \"./Rendering/camera\";\r\nimport { Scene } from \"./Rendering/scene\";\r\nimport { StaticModel } from \"./Rendering/staticModel\";\r\nimport { StaticRenderer } from \"./Rendering/staticRenderer\";\r\nimport { Vector3, Vector4 } from \"./Rendering/vector\";\r\nimport { Time } from \"./time\";\r\n\r\n// stuff related to camera and camera movement\r\nlet firsPersonCamera = {\r\n    cameraObj: null as Camera,\r\n    forwardVelocity: new Vector3(0, 0, 0),\r\n    rightVelocity: new Vector3(0, 0, 0),\r\n    maxXRotation: degToRad(88),\r\n    minXRotation: degToRad(-88),\r\n    currentRotationAngles: new Vector3(),\r\n    cameraSpeed: 20,\r\n    mouseSensibility: 0.1,\r\n    Move(direction: Vector3) {\r\n        let cam = this.cameraObj as Camera;\r\n        let speed = this.cameraSpeed * Time.deltaTime;\r\n        let forwardVelocity = Vector3.multiply(cam.transform.forward, -direction.z);\r\n        let rightVelocity = Vector3.multiply(cam.transform.right, direction.x);\r\n        let velocity = Vector3.multiply(Vector3.add(forwardVelocity, rightVelocity), speed);\r\n        cam.transform.translate(velocity);\r\n    },\r\n    Rotate(rotationAmount: Vector3) {\r\n        //TODO: This rotation is kinda scuffed, come back here someday\r\n        let cam = this.cameraObj as Camera;\r\n        let speed = this.mouseSensibility * Time.deltaTime;\r\n\r\n        let before = new Vector3(\r\n            this.currentRotationAngles.x,\r\n            this.currentRotationAngles.y,\r\n            0\r\n        );\r\n\r\n        this.currentRotationAngles.x -= speed * rotationAmount.x;\r\n        this.currentRotationAngles.y -= speed * rotationAmount.y;\r\n\r\n        if (this.currentRotationAngles.x > this.maxXRotation) this.currentRotationAngles.x = this.maxXRotation;\r\n        else if (this.currentRotationAngles.x < this.minXRotation) this.currentRotationAngles.x = this.minXRotation;\r\n\r\n        //let rotation = Vector3.subtract(this.currentRotationAngles, before);\r\n        //rotation.x *= cam.transform.right.x < 0 ? -1 : 1;\r\n        //rotation.y *= cam.transform.up.y;\r\n        cam.transform.setRotation(this.currentRotationAngles);\r\n        //cam.transform.rotate(rotation);\r\n    }\r\n};\r\n\r\n// this is for keyboard event handling\r\n// when 'keydown' happens, we set to true\r\n// when 'keyup' happens, we set to false\r\n// in the gameloop we process input based on this flags.\r\nlet controls = {\r\n    up: false,\r\n    down: false,\r\n    left: false,\r\n    right: false\r\n}\r\n\r\n/**\r\n * Time since last frame, in seconds\r\n */\r\n//let deltaTime = 0;\r\n//let previousFrameTime = 0;\r\n\r\n//vars for counting frames\r\nlet frameCount = 0;\r\nlet timeForFPS = 0;\r\n\r\nlet staticRenderer: StaticRenderer;\r\nlet animatedRenderer: AnimatedRenderer;\r\n\r\n//array of game objects\r\n//let rootGameObject = new GameObject();\r\n//let gameObjects = new Array<GameObject>();\r\nlet models = new Array<StaticModel>();\r\nlet scene: Scene;\r\n\r\nwindow.onload = main;\r\nfunction main(): void {\r\n    FileLoader.loadGltf(\"./assets/whale.CYCLES.gltf\").then((gltfModel) => {\r\n        setup();\r\n        scene = new Scene(\r\n            firsPersonCamera.cameraObj,\r\n            Vector3.normalize(new Vector3(0.5, 0.7, 1)),\r\n            []\r\n        );\r\n        let texture = animatedRenderer.loadTexture2(new Vector4(0, 0, 255, 255));\r\n        //renderer.bufferData2();\r\n        let model = new StaticModel(\r\n            gltfModel.positionData,\r\n            gltfModel.normalData,\r\n            gltfModel.texCoordData,\r\n            gltfModel.indicesData,\r\n            staticRenderer\r\n        );\r\n\r\n\r\n        model.transform.position = new Vector3(3, 5, 0);\r\n        model.transform.scale = new Vector3(0.4347, 0.4347, 0.4347);\r\n        model.transform.rotate(new Vector3(degToRad(90), 0, 0));\r\n        model.texture = texture;\r\n        //models.push(model);\r\n        //scene.rootNodes.push(model);\r\n\r\n        model.update = () => {\r\n            //model.transform.rotate(new Vector3(Time.deltaTime * degToRad(90), 0, 0));\r\n        };\r\n\r\n        let model2 = new AnimatedModel(\r\n            gltfModel.positionData,\r\n            gltfModel.normalData,\r\n            gltfModel.texCoordData,\r\n            gltfModel.indicesData,\r\n            gltfModel.jointData,\r\n            gltfModel.weightData,\r\n            gltfModel.rootJoint,\r\n            gltfModel.jointCount,\r\n            animatedRenderer);\r\n        \r\n        model2.transform.rotate(new Vector3(degToRad(85), 0, 0));\r\n        model2.transform.translate(new Vector3(0, 0, -10));\r\n\r\n\r\n\r\n        let animAttack = HumbleAnimation.fromGLTFAnimation(gltfModel.animations[0]);\r\n        let animSwim = HumbleAnimation.fromGLTFAnimation(gltfModel.animations[1]);\r\n\r\n        model2.doAnimation(animAttack);\r\n\r\n\r\n        \r\n        model2.texture = texture;\r\n        models.push(model2);\r\n        scene.rootNodes.push(model2);\r\n        createEventHandlers();\r\n        requestAnimationFrame(gameLoop);\r\n    });\r\n\r\n\r\n    // //first of all, load resources!\r\n    // loadResources().then(() => {\r\n    //     setup();\r\n    //     instantiateObjects();\r\n    //     renderer.bufferData(gameObjects); // This should be called everytime we add or remove meshes to the scene\r\n    //     createEventHandlers();\r\n    //     requestAnimationFrame(gameLoop);\r\n    // });\r\n\r\n}\r\n\r\nfunction setup(): void {\r\n    let canvasElem: HTMLCanvasElement = document.querySelector(\"#canvas\");\r\n    let vertexShaderElemStatic: HTMLScriptElement = document.querySelector(\"#vertex-shader-3d-textured-lit2\");\r\n    let fragmentShaderElemStatic: HTMLScriptElement = document.querySelector(\"#fragment-shader-3d-textured-lit2\");\r\n\r\n    let vertexShaderElemAnimated: HTMLScriptElement = document.querySelector(\"#vertex-shader-3d-textured-skinned\");\r\n    let fragmentShaderElemAnimated: HTMLScriptElement = document.querySelector(\"#fragment-shader-3d-textured-skinned\");\r\n\r\n\r\n    //initialize canvas and webgl stuff\r\n    let gl = canvasElem.getContext(\"webgl\");\r\n    if (!gl) {\r\n        console.error(\"Something went wrong while creating webgl context\");\r\n        return;\r\n    }\r\n    gl.getExtension('OES_texture_float');\r\n\r\n    let vertexShader = webglUtils.loadFromScript(gl, vertexShaderElemStatic, gl.VERTEX_SHADER);\r\n    let fragmentShader = webglUtils.loadFromScript(gl, fragmentShaderElemStatic, gl.FRAGMENT_SHADER);\r\n    let program = webglUtils.createProgram(gl, vertexShader, fragmentShader);\r\n\r\n    staticRenderer = new StaticRenderer(gl, program);\r\n\r\n    vertexShader = webglUtils.loadFromScript(gl, vertexShaderElemAnimated, gl.VERTEX_SHADER);\r\n    fragmentShader = webglUtils.loadFromScript(gl, fragmentShaderElemAnimated, gl.FRAGMENT_SHADER);\r\n    program = webglUtils.createProgram(gl, vertexShader, fragmentShader);\r\n    animatedRenderer = new AnimatedRenderer(gl, program);\r\n\r\n\r\n    const aspect = canvasElem.clientWidth / canvasElem.clientHeight;\r\n    let yFov = degToRad(60); //To radians;\r\n    let zNear = 1;\r\n    let zFar = 2000;\r\n\r\n    firsPersonCamera.cameraObj = new Camera(\r\n        yFov,\r\n        aspect,\r\n        zNear,\r\n        zFar\r\n    );\r\n    firsPersonCamera.cameraObj.computePerspectiveMatrix();\r\n}\r\n\r\nasync function loadResources() {\r\n    //we load everything we need to start rendering here....\r\n    //let allstarImagePromise = FileLoader.loadImage(\"./assets/allstar.png\");\r\n    //let allstarMeshesPromise = FileLoader.loadOBJ(\"./assets/allstar.obj\");\r\n    //let promises: Promise<any>[] = [allstarImagePromise, allstarMeshesPromise];\r\n\r\n    //resume only when everything is ready....\r\n    //await Promise.all(promises).then((values) => {\r\n    //allstarImage = values[0];\r\n    //allstarMeshes = values[1];\r\n    //});\r\n}\r\n\r\nfunction gameLoop(now: number): void {\r\n    //now *= 0.001;\r\n    //deltaTime = now - previousFrameTime;\r\n    //previousFrameTime = now;\r\n    Time.computeTime(now);\r\n    //computeFramesPerSecond();\r\n    processInput();\r\n    update();\r\n    render();\r\n    requestAnimationFrame(gameLoop);\r\n}\r\n\r\nfunction processInput() {\r\n\r\n    let direction = new Vector3();\r\n    if (controls.up) direction = Vector3.add(direction, Vector3.forward);\r\n    if (controls.down) direction = Vector3.add(direction, Vector3.backward);\r\n    if (controls.right) direction = Vector3.add(direction, Vector3.right);\r\n    if (controls.left) direction = Vector3.add(direction, Vector3.left);\r\n\r\n    firsPersonCamera.Move(direction);\r\n}\r\n\r\n\r\nfunction update(): void {\r\n\r\n    scene.update();\r\n\r\n    // models.forEach(model => {\r\n    //     model.update(deltaTime, previousFrameTime);\r\n    //     //model.transform.translate(new Vector3(1 * deltaTime, 0, 0));\r\n    // });\r\n}\r\n\r\nfunction render(): void {\r\n    animatedRenderer.clear();\r\n    scene.render();\r\n    // models.forEach(model => {\r\n    //     model.render(Camera.getActiveCamera());\r\n    // });\r\n}\r\n\r\nfunction createEventHandlers(): void {\r\n    document.addEventListener(\"keydown\", function (event: KeyboardEvent) {\r\n        if (event.key === 'w') {\r\n            controls.up = true;\r\n        } else if (event.key === 's') {\r\n            controls.down = true;\r\n        } else if (event.key === 'a') {\r\n            controls.left = true;\r\n        } else if (event.key === 'd') {\r\n            controls.right = true;\r\n        } else if (event.key === 'Enter') {\r\n            //console.log(controls);\r\n        }\r\n    });\r\n    document.addEventListener(\"keyup\", function (event: KeyboardEvent) {\r\n        if (event.key === 'w') {\r\n            controls.up = false;\r\n        } else if (event.key === 's') {\r\n            controls.down = false;\r\n        } else if (event.key === 'a') {\r\n            controls.left = false;\r\n        } else if (event.key === 'd') {\r\n            controls.right = false;\r\n        } else if (event.key === 'Enter') {\r\n            //console.log(controls);\r\n        }\r\n    });\r\n\r\n    // pointer lock object forking for cross browser\r\n    let canvas = animatedRenderer.getContext().canvas as HTMLCanvasElement;\r\n\r\n    canvas.addEventListener(\"click\", function (this: HTMLCanvasElement, event: Event) {\r\n        this.requestPointerLock();\r\n    });\r\n\r\n    document.addEventListener('pointerlockchange', pointerLockChanged);\r\n\r\n    function pointerLockChanged(): void {\r\n        if (document.pointerLockElement === canvas) {\r\n            document.addEventListener(\"mousemove\", mouseMoved);\r\n        } else {\r\n            //console.log('The pointer lock status is now unlocked');\r\n            document.removeEventListener(\"mousemove\", mouseMoved);\r\n        }\r\n    }\r\n\r\n    function mouseMoved(event: MouseEvent) {\r\n        let rotation = new Vector3(\r\n            event.movementY,\r\n            event.movementX,\r\n            0\r\n        );\r\n        firsPersonCamera.Rotate(rotation);\r\n    }\r\n}\r\n\r\nfunction computeFramesPerSecond() {\r\n    frameCount++;\r\n    timeForFPS += Time.deltaTime;\r\n    if (timeForFPS >= 1.0) {\r\n        console.log(frameCount);\r\n        timeForFPS -= 1.0;\r\n        frameCount = 0\r\n    }\r\n}\r\n\r\n","import { Camera } from \"./camera\";\r\nimport { Model } from \"./model\";\r\nimport { TreeNode } from \"./node\";\r\nimport { Vector3 } from \"./vector\";\r\n\r\nexport class Scene {\r\n    activeCamera: Camera;\r\n    globalLightDirection: Vector3;\r\n    rootNodes: TreeNode[];\r\n\r\n    constructor(camera?: Camera, globalLightDirection?: Vector3, nodes?: TreeNode[]) {\r\n        this.activeCamera = camera ?? null;\r\n        this.globalLightDirection = globalLightDirection ?? null;\r\n        this.rootNodes = nodes ?? [];\r\n    }\r\n\r\n    update(): void {\r\n        this.rootNodes.forEach(rootNode => {\r\n            rootNode.updateTransforms();\r\n        });\r\n    }\r\n\r\n\r\n    render(): void {\r\n        //TODO: maybe we should have a list of renderables?\r\n        this.rootNodes.forEach(rootNode => {\r\n            let model = rootNode as Model;\r\n            if (model.render) {\r\n                model.update();\r\n                model.render(this.activeCamera);\r\n            }\r\n        });\r\n    }\r\n}","import { Model } from \"./model\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nexport class StaticModel extends Model {\r\n    positions: WebGLBuffer;\r\n    normals: WebGLBuffer;\r\n    textureCoords: WebGLBuffer;\r\n    indices: WebGLBuffer;\r\n    indexCount: number;\r\n    texture: WebGLTexture;\r\n\r\n    constructor(positions: Float32Array, normals: Float32Array, textureCoords: Float32Array, indices: Uint16Array, renderer: Renderer) {\r\n        super(renderer);\r\n        let ctx = this.renderer.getContext();\r\n        this.positions = ctx.createBuffer();\r\n        this.normals = ctx.createBuffer();\r\n        this.textureCoords = ctx.createBuffer();\r\n        this.indices = ctx.createBuffer();\r\n        this.indexCount = indices.length;\r\n\r\n        this.bufferData(this.indices, indices, WebGLRenderingContext.ELEMENT_ARRAY_BUFFER);\r\n        this.bufferData(this.positions, positions, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.normals, normals, WebGLRenderingContext.ARRAY_BUFFER);\r\n        this.bufferData(this.textureCoords, textureCoords, WebGLRenderingContext.ARRAY_BUFFER);\r\n    }\r\n\r\n    update(): void { }\r\n}","import { Camera } from \"./camera\";\r\nimport { Matrix4 } from \"./matrix\";\r\nimport { BaseRenderer } from \"./renderer\";\r\nimport { StaticModel } from \"./staticModel\";\r\nimport { Vector3, Vector4 } from \"./vector\";\r\n\r\nexport class StaticRenderer extends BaseRenderer {\r\n    private positionAttributeLocation: number;\r\n    private texCoordsAttributeLocation: number;\r\n    private normalsAttributeLocation: number;\r\n\r\n    private worldMatrixUniformLocation: WebGLUniformLocation;\r\n    private viewMatrixUniformLocation: WebGLUniformLocation;\r\n    private projectionMatrixUniformLocation: WebGLUniformLocation;\r\n    private worldInverseTransposeMatrixLocation: WebGLUniformLocation;\r\n    private reverseLightDirectionLocation: WebGLUniformLocation;\r\n\r\n    constructor(context: WebGLRenderingContext, program: WebGLProgram) {\r\n        super(context, program);\r\n\r\n        this.positionAttributeLocation = context.getAttribLocation(program, \"a_position\");\r\n        this.texCoordsAttributeLocation = context.getAttribLocation(program, \"a_texcoord\");\r\n        this.normalsAttributeLocation = context.getAttribLocation(program, \"a_normal\");\r\n\r\n        this.worldMatrixUniformLocation = context.getUniformLocation(program, \"u_worldMatrix\");\r\n        this.viewMatrixUniformLocation = context.getUniformLocation(program, \"u_viewMatrix\");\r\n        this.projectionMatrixUniformLocation = context.getUniformLocation(program, \"u_projectionMatrix\");\r\n        this.worldInverseTransposeMatrixLocation = context.getUniformLocation(program, \"u_worldInverseTransposeMatrix\");\r\n        this.reverseLightDirectionLocation = context.getUniformLocation(program, \"u_reverseLightDirection\");\r\n    }\r\n\r\n    loadTexture(img: HTMLImageElement): WebGLTexture {\r\n        let texture = this.context.createTexture();\r\n        this.context.bindTexture(this.context.TEXTURE_2D, texture);\r\n\r\n        // Set the parameters so we can render any size image.\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_S, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_T, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MIN_FILTER, this.context.NEAREST);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MAG_FILTER, this.context.NEAREST);\r\n\r\n        // Upload the image into the texture.\r\n        this.context.texImage2D(this.context.TEXTURE_2D, 0, this.context.RGBA, this.context.RGBA, this.context.UNSIGNED_BYTE, img);\r\n        this.context.generateMipmap(this.context.TEXTURE_2D);\r\n\r\n        return texture;\r\n    }\r\n\r\n    //TODO: Move this out\r\n    loadTexture2(color: Vector4) {\r\n        let texture = this.context.createTexture();\r\n        this.context.bindTexture(this.context.TEXTURE_2D, texture);\r\n\r\n        // Set the parameters so we can render any size image.\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_S, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_T, this.context.CLAMP_TO_EDGE);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MIN_FILTER, this.context.NEAREST);\r\n        this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MAG_FILTER, this.context.NEAREST);\r\n\r\n        // Upload the image into the texture.\r\n        this.context.texImage2D(this.context.TEXTURE_2D, 0, this.context.RGBA, 1, 1, 0, this.context.RGBA, this.context.UNSIGNED_BYTE,\r\n            new Uint8Array([0, 0, 255, 255]));\r\n        //this.context.generateMipmap(this.context.TEXTURE_2D);\r\n\r\n        return texture;\r\n    }\r\n\r\n    clear() {\r\n        this.context.clearColor(0.5, 0.5, 0.5, 1);\r\n        this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    render(model: StaticModel, camera: Camera): void {\r\n        let projectionMatrix = camera.getPerspectiveMatrix();\r\n        let viewMatrix = Matrix4.makeViewMatrix(\r\n            camera.transform.position,\r\n            Vector3.add(camera.transform.position, camera.transform.forward),\r\n            Vector3.up);\r\n\r\n        // Tell WebGL how to convert from clip space to pixels\r\n        this.context.viewport(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n        this.context.useProgram(this.program);\r\n        this.context.enable(this.context.CULL_FACE);\r\n        this.context.enable(this.context.DEPTH_TEST);\r\n\r\n        //set uniforms\r\n        this.context.uniformMatrix4fv(this.worldMatrixUniformLocation, false, model.transform.getWorldMatrix().flatten());\r\n        this.context.uniformMatrix4fv(this.projectionMatrixUniformLocation, false, projectionMatrix.flatten());\r\n        this.context.uniformMatrix4fv(this.viewMatrixUniformLocation, false, viewMatrix.flatten());\r\n\r\n        let worldInverse = Matrix4.inverse(model.transform.getWorldMatrix());\r\n        this.context.uniformMatrix4fv(this.worldInverseTransposeMatrixLocation, false, Matrix4.transpose(worldInverse).flatten());\r\n        //TODO: use the light from Scene object\r\n        let reverseLightDirectionVector = Vector3.normalize(new Vector3(0.5, 0.7, 1));\r\n        this.context.uniform3fv(\r\n            this.reverseLightDirectionLocation,\r\n            new Float32Array([\r\n                reverseLightDirectionVector.x,\r\n                reverseLightDirectionVector.y,\r\n                reverseLightDirectionVector.z])\r\n        );\r\n\r\n        //bind buffers\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.positions);\r\n        this.context.enableVertexAttribArray(this.positionAttributeLocation);\r\n        //Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        this.context.vertexAttribPointer(\r\n            this.positionAttributeLocation,\r\n            3,          // we are passing 3 components per iteration\r\n            this.context.FLOAT,   // the type of each component\r\n            false,      // should normalize?\r\n            0,          // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0           // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.textureCoords);\r\n        this.context.enableVertexAttribArray(this.texCoordsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.texCoordsAttributeLocation,\r\n            2,         // we are passing 2 components per iteration\r\n            this.context.FLOAT,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.bindBuffer(this.context.ARRAY_BUFFER, model.normals);\r\n        this.context.enableVertexAttribArray(this.normalsAttributeLocation);\r\n        this.context.vertexAttribPointer(\r\n            this.normalsAttributeLocation,\r\n            3,         // we are passing 3 components per iteration\r\n            this.context.FLOAT,  // the type of each component\r\n            false,     // should normalize?\r\n            0,         // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n            0          // 0 = start at the beginning of the buffer\r\n        );\r\n\r\n        this.context.activeTexture(this.context.TEXTURE0);\r\n        this.context.bindTexture(this.context.TEXTURE_2D, model.texture);\r\n\r\n\r\n        this.context.drawElements(\r\n            WebGLRenderingContext.TRIANGLES,\r\n            model.indexCount,\r\n            this.context.UNSIGNED_SHORT,\r\n            0\r\n        );\r\n    }\r\n}"],"sourceRoot":""}